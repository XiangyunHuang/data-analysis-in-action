# lattice 入门 {#sec-basic-lattice}

```{r}
#| echo: false

source("_common.R")
```

> If you imagine that this pen is Trellis, then Lattice is not this pen.
>
> --- Paul Murrell [^visualization-lattice-1]

[^visualization-lattice-1]: Paul 在 DSC 2001 大会上的幻灯片 见<https://www.stat.auckland.ac.nz/~paul/Talks/dsc2001.pdf>

本章主要介绍 **lattice** 包 [@Deepayan2008] 及其相关的 **latticeExtra** 包。

```{r}
#| message: false

library(lattice)
library(latticeExtra)
library(splines)
library(nlme)
library(mgcv)
library(maps)
library(sf)
library(RColorBrewer)
```

## 散点图 {#sec-lattice-xyplot}

```{r}
#| label: fig-lattice-xyplot
#| fig-width: 4
#| fig-height: 4
#| fig-showtext: true
#| fig-cap: 分组散点图

xyplot(x = Sepal.Length ~ Petal.Length,
  groups = Species, scales = "free", data = iris,
  xlab = "萼片长度", ylab = "花瓣长度"
)
```

-   参数 `x` 表示 R 语言语法中的公式表达式，示例中为 `Sepal.Length ~ Petal.Length` 。

-   参数 `groups` 表示分组变量

-   参数 `scales` 表示坐标轴刻度

-   参数 `data` 表示绘图数据

-   参数 `xlab` 和参数 `ylab` 分别表示横纵坐标轴标签。

还有许多其它参数

`xyplot()` 还是一个泛型函数

```{r}
methods(xyplot)
```

1949-1960 年每月月粒度的数据

```{r}
xyplot(AirPassengers, scales = "free", 
       xlab = "年份", ylab = "航空乘客数量")
```

函数 `stl()` 分解一元时间序列数据

```{r}
air_stl <- stl(x = AirPassengers, s.window = 12)
xyplot(air_stl, scales = "free", xlab = "年份")
```

原始数据、季节性（周期）、趋势性和残余的部分。

```{r}
ar(AirPassengers)
arima(AirPassengers)
acf(AirPassengers)
pacf(AirPassengers)
```

## 图形参数 {#sec-lattice-par}

```{r}
#| label: fig-lattice-theme
#| fig-cap: lattice 图形参数设置
#| echo: false
#| fig-width: 6.5
#| fig-height: 6.5
#| fig-showtext: true

show.settings(x = trellis.par.set(list(
  axis.text = list(fontfamily = "sans"),      # 轴标签字体
  add.text = list(fontfamily = "mono"),
  par.main.text = list(fontfamily = "serif"), # 主标题字体
  par.sub.text = list(fontfamily = "serif")   # 副标题字体
)))
```

```{r}
#| label: fig-lattice-xyplot-2
#| fig-width: 4.5
#| fig-height: 4
#| fig-showtext: true
#| fig-cap: 分组散点图

xyplot(Sepal.Length ~ Petal.Length,
  groups = Species, data = iris, scales = "free",
  xlab = "萼片长度", ylab = "花瓣长度",
  par.settings = list(
    superpose.symbol = list(pch = 16),
    superpose.line = list(lwd = 2, lty = 3)
  ),
  panel = function(x, y, ...) {
    panel.xyplot(x, y, ...)
  },
  auto.key = list(x = 0, y = .8, corner = c(0, 0))
)
```

## 常见图形 {#sec-common-lattice}

### 曲线图 {#sec-lattice-smoother}

-   **splines** 自然立方样条 `ns()`
-   **mgcv** 广义可加模型 `s()`

```{r}
#| label: fig-lattice-colours
#| fig-width: 3
#| fig-height: 3
#| fig-cap: 调色板
#| fig-showtext: true
#| echo: false

scales::show_col(colours = c("#4285f4", "#34A853", "#FBBC05", "#EA4335"))
```

@fig-lattice-smoother 中用不同的回归模型拟合数据中的趋势。1920s 汽车行驶距离和速度的关系图。

```{r}
#| label: fig-lattice-smoother
#| fig-width: 4.5
#| fig-height: 4
#| layout-ncol: 2
#| layout-nrow: 2
#| fig-cap: 回归拟合曲线图
#| fig-subcap: 
#| - 线性回归
#| - 局部多项式回归
#| - 自然样条回归
#| - 广义可加回归
#| fig-showtext: true

library(splines)
library(mgcv)
xyplot(dist ~ speed, data = cars, scales = "free",
  xlab = "速度", ylab = "距离",
  panel = function(x, y, ...) {
    panel.xyplot(x, y, ...)
    panel.smoother(y ~ x,
      col.line = "#EA4335", method = "lm", ...
    )
  }
)
xyplot(dist ~ speed, data = cars, scales = "free",
  xlab = "速度", ylab = "距离",
  panel = function(x, y, ...) {
    panel.xyplot(x, y, ...)
    panel.smoother(y ~ x,
      col.line = "#4285f4", method = "loess", span = 0.9, ...
    )
  }
)
xyplot(dist ~ speed, data = cars, scales = "free",
  xlab = "速度", ylab = "距离",
  panel = function(x, y, ...) {
    panel.xyplot(x, y, ...)
    panel.smoother(y ~ ns(x, 5),
      col.line = "#34A853", method = "lm", ...
    )
  }
)
xyplot(dist ~ speed, data = cars, scales = "free",
  xlab = "速度", ylab = "距离",
  panel = function(x, y, ...) {
    panel.xyplot(x, y, ...)
    panel.smoother(y ~ s(x),
      col.line = "#FBBC05", method = "gam", ...
    )
  }
)
```

### 箱线图 {#sec-lattice-boxplot}

```{r}
#| label: fig-lattice-bwplot
#| fig-width: 4.5
#| fig-height: 4
#| fig-cap: 箱线图
#| fig-showtext: true

bwplot(Petal.Length ~ Species, data = iris, scales = "free",
       xlab = "鸢尾花种类", ylab = "花瓣长度")
```

### 柱形图 {#sec-lattice-barchart}

```{r}
#| label: fig-lattice-barchart
#| fig-width: 6
#| fig-height: 6
#| fig-cap: 柱形图
#| fig-showtext: true

data(Insurance, package = "MASS")
barchart(Claims / Holders ~ Age | Group,
  groups = District, data = Insurance,
  main = "Claims frequency",
  auto.key = list(
    space = "top", columns = 4,
    title = "District", cex.title = 1
  )
)
```

### 点线图 {#sec-lattice-segplot}

各个郡县每 10 万人当中因癌症死亡的人数。

```{r}
#| label: fig-lattice-segplot
#| fig-width: 6
#| fig-height: 5
#| fig-cap: 点线图
#| fig-showtext: true

segplot(reorder(county, rate.male) ~ LCL95.male + UCL95.male,
  data = subset(USCancerRates, state == "New Jersey"),
  draw.bands = FALSE, centers = rate.male,
  scales = list(x = list(alternating = 1, tck = c(1, 0))), 
  xlab = "癌症死亡率", ylab = "郡县"
)
```

### 阶梯图 {#sec-lattice-step}

阶梯图表示经验累积分布，不同种类的鸢尾花，花瓣长度的分布明显不同。

```{r}
#| label: fig-lattice-ecdfplot
#| fig-showtext: true
#| fig-cap: 阶梯图
#| fig-width: 6
#| fig-height: 4

ecdfplot(~Petal.Length | Species, data = iris,
         scales = "free", xlab = "花瓣长度")
```

### 分面图 {#sec-lattice-facet}

```{r}
#| label: fig-lattice-facet
#| fig-cap: 分面图
#| fig-width: 6.5
#| fig-height: 6
#| fig-showtext: true

depth.ord <- rev(order(quakes$depth))
quakes$Magnitude <- equal.count(quakes$mag, 4)
quakes.ordered <- quakes[depth.ord, ]

levelplot(depth ~ long + lat | Magnitude,
  data = quakes.ordered,
  panel = panel.levelplot.points, type = c("p", "g"),
  scales = "free", layout = c(2, 2),
  prepanel = prepanel.default.xyplot
)
```

### 透视图 {#sec-lattice-wireframe}

有如下参数方程

$$
\begin{aligned}
\left\{ 
 \begin{array}{l}
x(u,v) = \cos(u)\big(r + \cos(u / 2)\big) \\
y(u,v) = \sin(u)\big(r + \cos(u / 2)\sin(tv) - \sin(u / 2)\sin(2tv)\big)\sin(tv) -
    \sin(u / 2)\sin(2tv) \\
z(u,v) = \sin(u / 2) \sin(tv) + \cos(u / 2) \sin(tv)
\end{array} \right.
\end{aligned}
$$

其中，$u$ 和 $v$ 是参数，$\frac{u}{2\pi} \in [0.3,1.25], \frac{v}{2\pi} \in [0,1]$，$r$ 和 $t$ 是常量，不妨设 $r = 2$ 和 $t=1$ 。

```{r}
#| label: fig-levelplot-wireframe 
#| fig-cap: 三维透视图
#| fig-width: 4.5
#| fig-height: 4.5
#| fig-showtext: true

# lattice 书 6.3.1 节 参数
kx <- function(u, v) cos(u) * (r + cos(u / 2))
ky <- function(u, v) {
  sin(u) * (r + cos(u / 2) * sin(t * v) -
    sin(u / 2) * sin(2 * t * v)) * sin(t * v) -
    sin(u / 2) * sin(2 * t * v)
}
kz <- function(u, v) sin(u / 2) * sin(t * v) + cos(u / 2) * sin(t * v)
n <- 50
u <- seq(0.3, 1.25, length = n) * 2 * pi
v <- seq(0, 1, length = n) * 2 * pi
um <- matrix(u, length(u), length(u))
vm <- matrix(v, length(v), length(v), byrow = TRUE)
r <- 2
t <- 1

wireframe(kz(um, vm) ~ kx(um, vm) + ky(um, vm),
  shade = TRUE, drape = FALSE, 
  xlab = expression(x[1]),
  ylab = expression(x[2]),
  zlab = list(expression(
    italic(f) ~ group("(", list(x[1], x[2]), ")")
  ), rot = 90), alpha = 0.75,
  scales = list(arrows = FALSE, col = "black"),
  # 减少三维图形的边空
  lattice.options = list(
    layout.widths = list(
      left.padding = list(x = -0.5, units = "inches"),
      right.padding = list(x = -1.0, units = "inches")
    ),
    layout.heights = list(
      bottom.padding = list(x = -1.5, units = "inches"),
      top.padding = list(x = -1.5, units = "inches")
    )
  ),
  par.settings = list(axis.line = list(col = "transparent")),
  screen = list(z = 30, x = -65, y = 0)
)
```

### 轮廓图 {#sec-lattice-contour}

奥克兰火山地形图

```{r}
#| label: fig-levelplot-volcano 
#| fig-cap: 地形轮廓图
#| fig-width: 5
#| fig-height: 3.5
#| fig-showtext: true

levelplot(volcano,
  col.regions = hcl.colors, # gray.colors,
  # 去掉图形上、右边多余的刻度线
  scales = list(
    x = list(alternating = 1, tck = c(1, 0)),
    y = list(alternating = 1, tck = c(1, 0))
  ),
  par.settings = list(
    # x/y 轴标签字体，刻度标签字体
    par.xlab.text = list(fontfamily = "Noto Serif CJK SC"),
    par.ylab.text = list(fontfamily = "Noto Serif CJK SC"),
    axis.text = list(fontfamily = "sans")
  ),
  useRaster = TRUE,
  xlab = "南北方向", ylab = "东西方向"
)
```

**latticeExtra** 包的函数 `panel.2dsmoother()` 二维 `tp` thin plate regression spline 回归样条

```{r}
#| label: fig-levelplot-topo
#| fig-width: 4.5
#| fig-height: 4
#| fig-showtext: true
#| fig-cap: 轮廓图
#| message: false

library(mgcv)
data(topo, package = "MASS")
levelplot(z ~ x * y, data = topo, scales = "free",
  panel = panel.2dsmoother, contour = TRUE,
  form = z ~ s(x, y), method = "gam",
  xlab = "水平方向", ylab = "垂直方向"
)
```

### 聚类图 {#sec-lattice-ellipse}

```{r}
#| label: fig-lattice-ellipse
#| fig-width: 4.5
#| fig-height: 4
#| fig-showtext: true
#| fig-cap: 分组

xyplot(Sepal.Length ~ Petal.Length,
  groups = Species, data = iris, scales = "free",
  xlab = "萼片长度", ylab = "花瓣长度",
  par.settings = list(
    superpose.symbol = list(pch = 16),
    superpose.line = list(lwd = 2, lty = 3)
  ),
  panel = function(x, y, ...) {
    panel.xyplot(x, y, ...)
    panel.ellipse(x, y, ...)
  },
  auto.key = list(x = 0, y = .8, corner = c(0, 0))
)
```

### 面量图 {#sec-lattice-choropleth}

面量图，也叫地区分布图。

```{r}
#| message: false

library(sf)
us_state_sf <- readRDS("data/us-state-map-2010.rds")
# sf 转 sp
us_state_sp <- as(us_state_sf, "Spatial")
library(maps)
# sp 转 map 
us_state_map <- SpatialPolygons2map(us_state_sp, namefield = "NAME")
# 准备观测数据
data(votes.repub)
# 转为 data.frame 类型
votes_repub <- as.data.frame(votes.repub)
```

数据集 `votes.repub` 记录 1856-1976 年美国历届大选中共和党在各州的得票率。

```{r}
#| label: fig-lattice-choropleth
#| fig-showtext: true
#| fig-width: 5
#| fig-height: 5
#| fig-cap: 美国共和党在各州的得票率

library(latticeExtra)
library(RColorBrewer)
rdbu_pal <- colorRampPalette(colors = brewer.pal(n = 11, name = "RdBu"))
mapplot(rownames(votes_repub) ~ `1964` + `1968`,
  data = votes_repub, 
  # 去掉边界线
  border = NA,
  # 地图
  map = us_state_map,
  # 调色板
  colramp = rdbu_pal,
  # 多图布局 2 行 1 列
  layout = c(1, 2),
  # 去掉刻度
  scales = list(draw = FALSE),
  # 去掉横纵坐标轴标签
  xlab = "", ylab = ""
)
```

图中以由红到蓝的颜色变化表示由低到高的得票率，1964 年共和党在东南一隅得票率较高，在其它地方得票率普遍较低，形成一边倒的情况，最终由民主党的林登·约翰逊当选美国第36任总统。1968 年共和党在东南部得票率最低，与 1964 年相比，整个反过来了，最终由共和党的理查德·尼克松当选美国第37任总统。

## 总结 {#sec-basic-lattice-summary}

现在回过头来看，无论是图形样式还是绘图语法， **lattice** 可以看作是介于 Base R 和 **ggplot2** 之间的一种绘图风格。举例来说，下面比较 Base R 和 **lattice** 的图形样式。

```{r}
#| label: fig-lattice-vs-base
#| fig-width: 4
#| fig-height: 4
#| fig-showtext: true
#| fig-cap: 分组散点图
#| layout-ncol: 2
#| par: true
#| fig-subcap: 
#| - Base R 图形
#| - lattice 图形

plot(Sepal.Length ~ Petal.Length, col = Species, data = iris,
     xlab = "萼片长度", ylab = "花瓣长度")
xyplot(x = Sepal.Length ~ Petal.Length,
  groups = Species, scales = "free", data = iris,
  xlab = "萼片长度", ylab = "花瓣长度"
)
```
