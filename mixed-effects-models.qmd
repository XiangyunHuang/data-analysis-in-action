# 混合效应模型 {#sec-mixed-effects-models}

::: hidden
$$
 \def\bm#1{{\boldsymbol #1}}
$$
:::

> I think that the formula language does allow expressions with '/' to represent nested factors but I can't check right now as there is a fire in the building where my office is located. I prefer to simply write nested factors as `factor1 + factor1:factor2`.
>
> --- Douglas Bates [^mixed-effects-models-1]

[^mixed-effects-models-1]: <https://stat.ethz.ch/pipermail/r-sig-mixed-models/2013q1/019945.html>

```{r}
#| echo: false

source("_common.R")
```

```{r}
#| message: false

library(nlme)         # 线性混合效应模型
library(GLMMadaptive) # 广义线性混合效应模型
library(mgcv)         # 广义线性/可加混合效应模型
library(INLA)
library(splines)   # 样条
library(cmdstanr)  # 编译采样
library(ggplot2)   # 作图
library(bayesplot) # 后验分布
library(loo)       # LOO-CV
```

混合效应模型在心理学、生态学、计量经济学和空间统计学等领域应用十分广泛。线性混合效应模型有多个化身，比如生态学里的分层线性模型（Hierarchical linear Model，简称 HLM），心理学的多水平线性模型（Multilevel Linear Model）。模型名称的多样性正说明它应用的广泛性！ 混合效应模型内容非常多，非常复杂，因此，本章仅对常见的四种类型提供入门级的实战内容。从频率派和贝叶斯派两个角度介绍模型结构及说明、R 代码或 Stan 代码实现及输出结果解释。

除了 R 语言社区提供的开源扩展包，商业的软件有 [Mplus](https://www.statmodel.com/) 、[ASReml](https://vsni.co.uk/software/asreml) 和 [SAS](https://www.sas.com/) 等，而开源的软件 [OpenBUGS](https://www.mrc-bsu.cam.ac.uk/software/bugs/openbugs/) 、 [JAGS](https://mcmc-jags.sourceforge.io/) 和 [Stan](https://mc-stan.org/) 等。混合效应模型的种类非常多，一部分可以在一些流行的 R 包能力范围内解决，其余可以放在更加灵活、扩展性强的框架 Stan 内解决。因此，本章同时介绍 Stan 框架和一些 R 包。

本章用到 4 个数据集，其中 `sleepstudy` 和 `cbpp` 均来自 **lme4** 包 [@Bates2015]，分别用于介绍线性混合效应模型和广义线性混合效应模型，`Loblolly` 来自 **datasets** 包，用于介绍非线性混合效应模型，最后，朗格拉普岛核辐射数据数据集用于介绍广义可加混合效应模型。

在介绍理论的同时给出 R 语言或 S 语言实现的几本参考书籍。

-   《Mixed-Effects Models in S and S-PLUS》[@Pinheiro2000]
-   《Mixed Models: Theory and Applications with R》[@Demidenko2013]
-   《Linear Mixed-Effects Models Using R: A Step-by-Step Approach》[@Andrzej2013]
-   《Linear and Generalized Linear Mixed Models and Their Applications》[@Jiang2021]

## 线性混合效应模型 {#sec-lmm}

> I think what we are seeking is the marginal variance-covariance matrix of the parameter estimators (marginal with respect to the random effects random variable, B), which would have the form of the inverse of the crossproduct of a $(q+p)$ by $p$ matrix composed of the vertical concatenation of $-L^{-1}RZXRX^{-1}$ and $RX^{-1}$. (Note: You do *not* want to calculate the first term by inverting $L$, use `solve(L, RZX, system = "L")`
>
> -   \[...\] don't even think about using `solve(L)`
>
> -   don't!, don't!, don't!
>
> -   have I made myself clear?
>
> -   don't do that (and we all know that someone will do exactly that for a very large $L$ and then send out messages about "R is SOOOOO SLOOOOW!!!!" :-) )
>
> --- Douglas Bates [^mixed-effects-models-2]

[^mixed-effects-models-2]: <https://stat.ethz.ch/pipermail/r-sig-mixed-models/2010q2/003615.html>

::: callout-tip
1.  一般的模型结构和假设
2.  一般的模型表达公式
3.  **nlme** 包的函数 `lme()`
4.  公式语法和示例模型表示
:::

线性混合效应模型（Linear Mixed Models or Linear Mixed-Effects Models，简称 LME 或 LMM），介绍模型的基础理论，包括一般形式，矩阵表示，参数估计，假设检验，模型诊断，模型评估。参数方法主要是极大似然估计和限制极大似然估计。一般形式如下：

$$
\bm{y} = X\bm{\beta} + Z\bm{u} + \bm{\epsilon}
$$

其中，$\bm{y}$ 是一个向量，代表响应变量，$X$ 代表固定效应对应的设计矩阵，$\bm{\beta}$ 是一个参数向量，代表固定效应对应的回归系数，$Z$ 代表随机效应对应的设计矩阵，$\bm{u}$ 是一个参数向量，代表随机效应对应的回归系数，$\bm{\epsilon}$ 表示残差向量。

一般假定随机向量 $\bm{u}$ 服从多元正态分布，这是无条件分布，随机向量 $\bm{y}|\bm{u}$ 服从多元正态分布，这是条件分布。

$$
\begin{aligned}
\bm{u} &\sim \mathcal{N}(0,\Sigma) \\
\bm{y}|\bm{u} &\sim \mathcal{N}(X\bm{\beta} + Z\bm{u},\sigma^2W)
\end{aligned}
$$

其中，方差协方差矩阵 $\Sigma$ 必须是半正定的，$W$ 是一个对角矩阵。nlme 和 lme4 等 R 包共用一套表示随机效应的公式语法。

sleepstudy 数据集来自 lme4 包，是一个睡眠研究项目的实验数据。实验对象都是有失眠情况的人，有的人有严重的失眠问题（一天只有 3 个小时的睡眠时间）。进入实验后的前10 天的情况，记录平均反应时间、睡眠不足的天数。

```{r}
data(sleepstudy, package = "lme4")
str(sleepstudy)
```

Reaction 表示平均反应时间（毫秒），数值型，Days 表示进入实验后的第几天，数值型，Subject 表示参与实验的个体编号，因子型。

```{r}
xtabs(~ Days + Subject, data = sleepstudy)
```

每个个体每天产生一条数据，下 @fig-sleepstudy-line 中每条折线代表一个个体。

```{r}
#| label: fig-sleepstudy-line
#| fig-cap: sleepstudy 数据集
#| fig-width: 5
#| fig-height: 4
#| fig-showtext: true

library(ggplot2)
ggplot(data = sleepstudy, aes(x = Days, y = Reaction, group = Subject)) +
  geom_line() +
  scale_x_continuous(n.breaks = 6) +
  theme_bw() +
  labs(x = "睡眠不足的天数", y = "平均反应时间")
```

对于连续重复测量的数据（continuous repeated measurement outcomes），也叫纵向数据（longitudinal data），针对不同个体 Subject，相比于上图，下面绘制反应时间 Reaction 随睡眠时间 Days 的变化趋势更合适。图中趋势线是简单线性回归的结果，分面展示不同个体Subject 之间对比。

```{r}
#| label: fig-sleepstudy-facet
#| fig-cap: 分面展示 sleepstudy 数据集
#| fig-width: 6
#| fig-height: 6
#| fig-showtext: true

ggplot(data = sleepstudy, aes(x = Days, y = Reaction)) +
  geom_point() +
  geom_smooth(formula = "y ~ x", method = "lm", se = FALSE) +
  scale_x_continuous(n.breaks = 6) +
  theme_bw() +
  facet_wrap(facets = ~Subject, labeller = "label_both", ncol = 6) +
  labs(x = "睡眠不足的天数", y = "平均反应时间")
```

### nlme

考虑两水平的混合效应模型，其中随机截距 $\beta_{0j}$ 和随机斜率 $\beta_{1j}$，指标 $j$ 表示分组的编号，也叫变截距和变斜率模型

$$
\begin{aligned}
\mathrm{Reaction}_{ij} &= \beta_{0j} + \beta_{1j} \cdot \mathrm{Days}_{ij} + \epsilon_{ij} \\
\beta_{0j} &= \gamma_{00} + U_{0j} \\
\beta_{1j} &= \gamma_{10} + U_{1j} \\
\begin{pmatrix}
U_{0j} \\
U_{1j}
\end{pmatrix} &\sim \mathcal{N}
\begin{bmatrix}
\begin{pmatrix}
0 \\
0
\end{pmatrix}
,
\begin{pmatrix}
\tau^2_{00} & \tau_{01} \\
\tau_{01} & \tau^2_{10}
\end{pmatrix}
\end{bmatrix} \\
\epsilon_{ij} &\sim \mathcal{N}(0, \sigma^2) \\
i = 0,1,\cdots,9 &\quad j = 308,309,\cdots, 372.
\end{aligned}
$$

下面用 nlme 包 [@Pinheiro2000] 拟合模型。

```{r}
library(nlme)
sleep_nlme <- lme(Reaction ~ Days, random = ~ Days | Subject, data = sleepstudy)
summary(sleep_nlme)
```

随机效应（Random effects）部分：

```{r}
# 前 6 个 subject
head(ranef(sleep_nlme))
```

固定效应（Fixed effects）部分：

```{r}
fixef(sleep_nlme)
```

[**ggeffects**](https://github.com/strengejacke/ggeffects) 包的函数 `ggpredict()` 和 `ggeffect()` 可以用来绘制混合效应模型的边际效应（ Marginal Effects），[**ggPMX**](https://github.com/ggPMXdevelopment/ggPMX) 包 可以用来绘制混合效应模型的诊断图。下 @fig-lme-effects 展示关于变量 Days 的边际效应图。

```{r}
#| label: fig-lme-effects
#| fig-cap: 边际效应图
#| fig-showtext: true
#| fig-width: 4.5
#| fig-height: 4

library(ggeffects)
mydf <- ggpredict(sleep_nlme, terms = "Days")
ggplot(mydf, aes(x = x, y = predicted)) +
  geom_line() +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  scale_x_continuous(n.breaks = 6) +
  theme_bw() +
  labs(x = "Days", y = "Reaction")
```

```{r}
#| echo: false
#| eval: false

plot(mydf)
```

### MASS

```{r}
sleep_mass <- MASS::glmmPQL(Reaction ~ Days,
  random = ~ Days | Subject, verbose = FALSE,
  data = sleepstudy, family = gaussian
)
summary(sleep_mass)
```

### lme4

```{r}
sleep_lme4 <- lme4::lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)
summary(sleep_lme4)
```

### blme

```{r}
sleep_blme <- blme::blmer(
  Reaction ~ Days + (Days | Subject), data = sleepstudy,
  control = lme4::lmerControl(check.conv.grad = "ignore"),
  cov.prior = NULL)
summary(sleep_blme)
```

### brms

```{r}
#| eval: false
#| echo: true

sleep_brms <- brms::brm(Reaction ~ Days + (Days | Subject), data = sleepstudy)
summary(sleep_brms)
```

``` markdown
 Family: gaussian 
  Links: mu = identity; sigma = identity 
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy (Number of observations: 180) 
  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~Subject (Number of levels: 18) 
                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sd(Intercept)          27.03      6.60    15.88    42.13 1.00     1728     2469
sd(Days)                6.61      1.50     4.18     9.97 1.00     1517     2010
cor(Intercept,Days)     0.08      0.29    -0.46     0.65 1.00      991     1521

Population-Level Effects: 
          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
Intercept   251.26      7.42   236.27   266.12 1.00     1982     2687
Days         10.36      1.77     6.85    13.85 1.00     1415     1982

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sigma    25.88      1.54    22.99    29.06 1.00     3204     2869

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
```

```{r}
#| eval: false
#| echo: true

# predictions
conds <- brms::make_conditions(sleep_brms, "Subject")
sleep_brms |>
  brms::marginal_effects(
    re_formula = NULL,
    conditions = conds
  ) |>
  plot(points = TRUE, ncol = 6)
```

### MCMCglmm

将数据集 sleepstudy 中的 Reaction 除以 1000，目的是数值稳定性，减小迭代序列的相关性。

```{r}
## 尺度变换
sleepstudy$Reaction <- sleepstudy$Reaction / 1000
## 变截距、变斜率模型
prior1 <- list(
  R = list(V = 1, nu = 0.002),
  G = list(G1 = list(V = diag(2), nu = 0.002))
)
set.seed(20232023)
sleep_mcmcglmm <- MCMCglmm::MCMCglmm(
  Reaction ~ Days, random = ~ us(1 + Days):Subject, prior = prior1,
  data = sleepstudy, family = "gaussian", verbose = FALSE
)
summary(sleep_mcmcglmm)
```

固定效应 Location effects 截距 (Intercept) 为 0.25167，斜率 Days 为 0.01055 。

随机效应 R-structure 方差 0.0006742，则标准差为 0.02596536。

### INLA

先考虑变截距模型

```{r}
library(INLA)
inla.setOption(short.summary = TRUE)
# 前面已经做了尺度变换
# sleepstudy$Reaction <- sleepstudy$Reaction / 1000
# 变截距
sleep_inla1 <- inla(Reaction ~ Days + f(Subject, model = "iid", n = 18), 
                  family = "gaussian", data = sleepstudy)
# 输出结果
summary(sleep_inla1)
```

再考虑变截距和变斜率模型

```{r}
# https://inla.r-inla-download.org/r-inla.org/doc/latent/iid.pdf
# 二维高斯随机效应的先验为 Wishart prior
sleepstudy$Subject <- as.integer(sleepstudy$Subject)
sleepstudy$slopeid <- 18 + sleepstudy$Subject
# 变截距、变斜率
sleep_inla2 <- inla(
  Reaction ~ 1 + Days + f(Subject, model = "iid2d", n = 2 * 18) + f(slopeid, Days, copy = "Subject"),
  data = sleepstudy, family = "gaussian"
)
# 输出结果
summary(sleep_inla2)
```

## 广义线性混合效应模型 {#sec-glmm}

当响应变量分布不再是高斯分布，线性混合效应模型就扩展到广义线性混合效应模型。有一些 R 包可以拟合此类模型，MASS 包的函数 `glmmPQL()` ，**mgcv** 包的函数 `gam()`，lme4 包的函数 `glmer()` ，GLMMadaptive 包的函数 `mixed_model()` ，brms 包的函数 `brm()` 等。

| 响应变量分布 | MASS   | mgcv | lme4 | GLMMadaptive | brms |
|--------------|--------|------|------|--------------|------|
| 伯努利分布   | 支持   | 支持 | 支持 | 支持         | 支持 |
| 二项分布     | 支持   | 支持 | 支持 | 支持         | 支持 |
| 泊松分布     | 支持   | 支持 | 支持 | 支持         | 支持 |
| 负二项分布   | 不支持 | 支持 | 支持 | 支持         | 支持 |
| 伽马分布     | 支持   | 支持 | 支持 | 支持         | 支持 |

: 响应变量的分布 {#tbl-response}

函数 `glmmPQL()` 支持的分布族见函数 `glm()` 的参数 `family` ，lme4 包的函数 `glmer.nb()` 和 GLMMadaptive 包的函数 `negative.binomial()` 都可用于拟合响应变量服从负二项分布的情况。除了这些常规的分布，GLMMadaptive 和 brms 包还支持许多常见的分布，比如零膨胀的泊松分布、二项分布等，还可以自定义分布。

-   伯努利分布 `family = binomial(link = "logit")`
-   二项分布 `family = binomial(link = "logit")`
-   泊松分布 `family = poisson(link = "log")`
-   负二项分布 `lme4::glmer.nb()` 或 `GLMMadaptive::negative.binomial()`
-   伽马分布 `family = Gamma(link = "inverse")`

[GLMMadaptive](https://github.com/drizopoulos/GLMMadaptive) 包 [@Dimitris2023] 的主要函数 `mixed_model()` 是用来拟合广义线性混合效应模型的。下面以牛传染性胸膜肺炎（Contagious bovine pleuropneumonia，简称 CBPP）数据 cbpp 介绍函数 `mixed_model()` 的用法，该数据集来自 lme4 包。

```{r}
data(cbpp, package = "lme4")
str(cbpp)
```

herd 牛群编号，period 时间段，incidence 感染的数量，size 牛群大小。疾病在种群内扩散

```{r}
#| label: fig-glmm-cbpp
#| fig-cap: 感染比例随变量 herd 和 period 的变化
#| fig-showtext: true
#| fig-width: 6
#| fig-height: 3

ggplot(data = cbpp, aes(x = herd, y = period)) +
  geom_tile(aes(fill = incidence / size)) +
  scale_fill_viridis_c(label = scales::percent_format(), 
                       option = "C", name = "") +
  theme_minimal()
```

### MASS

```{r}
cbpp_mass <- MASS::glmmPQL(
  cbind(incidence, size - incidence) ~ period,
  random = ~ 1 | herd, verbose = FALSE,
  data = cbpp, family = binomial("logit")
)
summary(cbpp_mass)
```

### GLMMadaptive

```{r}
library(GLMMadaptive)
cbpp_glmmadaptive <- mixed_model(
  fixed = cbind(incidence, size - incidence) ~ period,
  random = ~ 1 | herd, data = cbpp, family = binomial(link = "logit")
)
summary(cbpp_glmmadaptive)
```

### glmmTMB

```{r}
cbpp_glmmtmb <- glmmTMB::glmmTMB(
  cbind(incidence, size - incidence) ~ period + (1 | herd),
  data = cbpp, family = binomial, REML = TRUE
)
summary(cbpp_glmmtmb)
```

### lme4

```{r}
cbpp_lme4 <- lme4::glmer(
  cbind(incidence, size - incidence) ~ period + (1 | herd),
  family = binomial("logit"), data = cbpp
)
summary(cbpp_lme4)
```

### mgcv

或使用 **mgcv** 包，可以得到近似的结果。随机效应部分可以看作可加的惩罚项

```{r}
#| message: false

library(mgcv)
cbpp_mgcv <- gam(
  cbind(incidence, size - incidence) ~ period + s(herd, bs = "re"),
  data = cbpp, family = binomial(link = "logit"), method = "REML"
)
summary(cbpp_mgcv)
```

下面给出随机效应的标准差的估计及其上下限，和前面 **GLMMadaptive** 包和 **lme4** 包给出的结果也是接近的。

```{r}
gam.vcomp(cbpp_mgcv)
```

### blme

```{r}
cbpp_blme <- blme::bglmer(
  cbind(incidence, size - incidence) ~ period + (1 | herd),
  family = binomial("logit"), data = cbpp
)
summary(cbpp_blme)
```

### brms

表示二项分布，公式语法与前面的 lme4 等包不同。

```{r}
#| eval: false
#| echo: true

cbpp_brms <- brms::brm(
  incidence | trials(size) ~ period + (1 | herd),
  family = binomial("logit"), data = cbpp
)
summary(cbpp_brms)
```

``` markdown
 Family: binomial 
  Links: mu = logit 
Formula: incidence | trials(size) ~ period + (1 | herd) 
   Data: cbpp (Number of observations: 56) 
  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~herd (Number of levels: 15) 
              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sd(Intercept)     0.76      0.22     0.39     1.29 1.00     1483     1962

Population-Level Effects: 
          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
Intercept    -1.40      0.26    -1.92    -0.88 1.00     2440     2542
period2      -1.00      0.31    -1.63    -0.41 1.00     5242     2603
period3      -1.14      0.34    -1.83    -0.50 1.00     4938     3481
period4      -1.61      0.44    -2.49    -0.81 1.00     4697     2966

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
```

### MCMCglmm

```{r}
set.seed(20232023)
cbpp_mcmcglmm <- MCMCglmm::MCMCglmm(
  cbind(incidence, size - incidence) ~ period, random = ~herd,
  data = cbpp, family = "multinomial2", verbose = FALSE
)
summary(cbpp_mcmcglmm)
```

对于服从非高斯分布的响应变量，MCMCglmm 总是假定存在过度离散的情况，即存在一个与分类变量无关的随机变量，或者说存在一个残差服从正态分布的随机变量（效应），可以看作测量误差，这种假定对真实数据建模是有意义的，所以，与以上 MCMCglmm 代码等价的 lme4 包模型代码如下：

```{r}
cbpp$id <- as.factor(1:dim(cbpp)[1])
cbpp_lme4 <- lme4::glmer(
  cbind(incidence, size - incidence) ~ period + (1 | herd) + (1 | id),
  family = binomial, data = cbpp
)
summary(cbpp_lme4)
```

贝叶斯的结果与频率派的结果相近，但还是有明显差异。

### INLA

表示二项分布，公式语法与前面的 brms 包和 lme4 等包都不同。

```{r}
cbpp_inla <- inla(
  formula = incidence ~ period + f(herd, model = "iid", n = 15),
  Ntrials = size, family = "binomial", data = cbpp
)
summary(cbpp_inla)
```

## 非线性混合效应模型 {#sec-nlmm}

Loblolly 数据集来自 R 内置的 datasets 包

```{r}
#| label: fig-Loblolly
#| fig-cap: Loblolly 数据集
#| fig-width: 5
#| fig-height: 4
#| fig-showtext: true

ggplot(data = Loblolly, aes(x = age, y = height, group = Seed)) +
  geom_line() +
  theme_bw()
```

### nlme

非线性回归

```{r}
nfm1 <- nls(height ~ SSasymp(age, Asym, R0, lrc),
           data = Loblolly, subset = Seed == 329)
summary(nfm1)
```

非线性函数 `SSasymp()` 的内容如下

$$
\mathrm{Asym}+(\mathrm{R0}-\mathrm{Asym})\times\exp\big(-\exp(\mathrm{lrc})\times\mathrm{input}\big)
$$

其中，$\mathrm{Asym}$ 、$\mathrm{R0}$ 、$\mathrm{lrc}$ 是参数，$\mathrm{input}$ 是输入值。

示例来自 **nlme** 包的函数 `nlme()` 帮助文档

```{r}
nfm2 <- nlme(height ~ SSasymp(age, Asym, R0, lrc),
  data = Loblolly,
  fixed = Asym + R0 + lrc ~ 1,
  random = Asym ~ 1,
  start = c(Asym = 103, R0 = -8.5, lrc = -3.3)
)
summary(nfm2)
# 更新模型的随机效应部分
nfm3 <- update(nfm2, random = pdDiag(Asym + lrc ~ 1))
summary(nfm3)
```

### lme4

lme4 的公式语法是与 nlme 包不同的。

```{r}
lob_lme4 <- lme4::nlmer(
  height ~ SSasymp(age, Asym, R0, lrc) ~ (Asym + R0 + lrc) + (Asym | Seed),
  data = Loblolly,
  start = c(Asym = 103, R0 = -8.5, lrc = -3.3)
)
summary(lob_lme4)
```

### brms

根据数据的情况，设定参数的先验分布

```{r}
#| eval: false
#| echo: true

lob_prior <- c(
  brms::set_prior("normal(101, 0.1)", nlpar = "Asym", lb = 100, ub = 102),
  brms::set_prior("normal(-8, 1)", nlpar = "R0", lb = -10),
  brms::set_prior("normal(-3, 3)", nlpar = "lrc", lb = -9),
  brms::set_prior("normal(3, 0.2)", class = "sigma")
)
```

根据模型表达式编码

```{r}
#| eval: false
#| echo: true

lob_formula <- brms::bf(
  height ~ Asym + (R0 - Asym) * exp( - exp(lrc) * age),
  # Nonlinear variables
  # Fixed effects: Asym R0 lrc
  R0 + lrc ~ 1,
  # Nonlinear variables
  # Random effects: Seed
  Asym ~ 1 + (1 | Seed),
  # Nonlinear fit
  nl = TRUE
)
```

```{r}
#| eval: false
#| echo: true

lob_brms <- brms::brm(lob_formula, data = Loblolly, prior = lob_prior)
summary(lob_brms)
```

``` markdown
 Family: gaussian 
  Links: mu = identity; sigma = identity 
Formula: height ~ Asym + (R0 - Asym) * exp(-exp(lrc) * age) 
         R0 ~ 1
         lrc ~ 1
         Asym ~ 1 + (1 | Seed)
   Data: Loblolly (Number of observations: 84) 
  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~Seed (Number of levels: 14) 
                   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sd(Asym_Intercept)     3.90      1.09     2.24     6.51 1.00     1033     1647

Population-Level Effects: 
               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
R0_Intercept      -8.53      0.43    -9.37    -7.68 1.00     2236     1434
lrc_Intercept     -3.23      0.02    -3.27    -3.20 1.00      981     1546
Asym_Intercept   101.00      0.10   100.80   101.20 1.00     4443     2907

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sigma     1.68      0.25     1.20     2.17 1.00     1910     2258

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
```

## 模拟实验比较（补充） {#sec-mixed-effects-simulation}

从广义线性混合效应模型生成模拟数据，用至少 6 个不同的 R 包估计模型参数，比较和归纳不同估计方法和实现算法的效果。举例：带漂移项的泊松型广义线性混合效应模型。$y_{ij}$ 表示响应变量，$\bm{u}$ 表示随机效应，$o_{ij}$ 表示漂移项。

$$
\begin{aligned}
y_{ij}|\bm{u} &\sim \mathrm{Poisson}(o_{ij}\lambda_{ij}) \\
\log(\lambda_{ij}) &= \beta_{ij}x_{ij} + u_{j} \\
u_j &\sim \mathcal{N}(0, \sigma^2) \\
i = 1,2,\ldots, n &\quad j = 1,2,\ldots,q
\end{aligned}
$$

首先准备数据

```{r}
set.seed(2023)
Ngroups <- 25 # 一个随机效应分 25 个组
NperGroup <- 100 # 每个组 100 个观察值
# 样本量
N <- Ngroups * NperGroup
# 截距和两个协变量的系数
beta <- c(0.5, 0.3, 0.2)
# 两个协变量
X <- MASS::mvrnorm(N, mu = rep(0, 2), Sigma = matrix(c(1, 0.8, 0.8, 1), 2))
# 漂移项
o <- rep(c(2, 4), each = N / 2)
# 分 25 个组 每个组 100 个观察值
g <- factor(rep(1:Ngroups, each = NperGroup))
u <- rnorm(Ngroups, sd = .5) # 随机效应的标准差 0.5
# 泊松分布的期望
lambda <- o * exp(cbind(1, X) %*% beta + u[g])
# 响应变量的值
y <- rpois(N, lambda = lambda)
# 模拟的数据集
sim_data <- data.frame(y, X, o, g)
colnames(sim_data) <- c("y", "x1", "x2", "o", "g")
```

### lme4

```{r}
# 模型拟合
fit_lme4 <- lme4::glmer(y ~ x1 + x2 + (1 | g),
  data = sim_data, offset = log(o), family = poisson(link = "log")
)
summary(fit_lme4)
```

### GLMMadaptive

对随机效应采用 adaptive Gauss-Hermite quadrature 积分

```{r}
library(GLMMadaptive)
fit_glmmadaptive <- mixed_model(
  fixed = y ~ x1 + x2 + offset(log(o)), 
  random = ~ 1 | g, data = sim_data,
  family = poisson(link = "log")
)
summary(fit_glmmadaptive)
```

### glmmTMB

```{r}
fit_glmmtmb <- glmmTMB::glmmTMB(
  y ~ x1 + x2 + (1 | g), offset = log(o),
  data = sim_data, family = poisson, REML = TRUE
)
summary(fit_glmmtmb)
```

### hglm

hglm 包的名称是 Hierarchical Generalized Linear Models 的首字母缩写拼成的。

```{r}
# extended quasi likelihood (EQL) method
fit_hglm <- hglm::hglm(
  fixed =  y ~ x1 + x2, random = ~ 1 | g,
  family = poisson(link = "log"), 
  offset = log(o), data = sim_data
)
summary(fit_hglm)
```

### glmmML

[glmmML](https://CRAN.R-project.org/package=glmmML) 包 Maximum Likelihood and numerical integration via Gauss-Hermite quadrature

```{r}
#| eval: false

fit_glmmml <- glmmML::glmmML(
  formula = y ~ x1 + x2, family = poisson,
  data = sim_data, offset = log(o), cluster = g
)
summary(fit_glmmml)
```

``` markdown
Call:  glmmML::glmmML(formula = y ~ x1 + x2, family = poisson, data = sim_data,      cluster = g, offset = log(o)) 


             coef se(coef)     z Pr(>|z|)
(Intercept) 0.556   0.1281  4.34  1.4e-05
x1          0.284   0.0128 22.21  0.0e+00
x2          0.209   0.0129 16.11  0.0e+00

Scale parameter in mixing distribution:  0.638 gaussian 
Std. Error:                              0.0865 

        LR p-value for H_0: sigma = 0:  0 

Residual deviance: 2770 on 2496 degrees of freedom  AIC: 2780 
```

### glmm

[glmm](https://github.com/knudson1/glmm) 包对随机效应的积分采用 Monte Carlo Likelihood Approximation 近似

```{r}
#| eval: false

# 对迭代时间没有给出预估，一旦执行，不知道什么时候会跑完
set.seed(2023)
# 设置双核并行迭代
clust <- parallel::makeCluster(2)
fit_glmm <- glmm::glmm(y ~ x1 + x2 + offset(log(o)),
  random = list(~ 1 + g), # 随机效应
  varcomps.names = "G", # 给随机效应取个名字
  data = sim_data,
  family.glmm = glmm::poisson.glmm, # 泊松型
  m = 10^4, debug = TRUE, cluster = clust
)
parallel::stopCluster(clust)
summary(fit_glmm)
```

glmm 包的帮助文档中的示例如下，可复现结果，运行时间 1-2 分钟。

```{r}
#| eval: false

set.seed(1234)
clust <- makeCluster(2)
sal <- glmm(
  Mate ~ 0 + Cross, random = list(~ 0 + Female, ~ 0 + Male),
  varcomps.names = c("F", "M"), data = salamander,
  family.glmm = bernoulli.glmm, m = 10^4, debug = TRUE, cluster = clust
)
summary(sal)
stopCluster(clust)
```

``` markdown
Call:
glmm(fixed = Mate ~ 0 + Cross, random = list(~0 + Female, ~0 + Male), 
    varcomps.names = c("F", "M"), data = salamander, 
    family.glmm = bernoulli.glmm, m = 10^4, debug = TRUE, cluster = clust)

Link is: "logit (log odds)"

Fixed Effects:
         Estimate Std. Error z value Pr(>|z|)    
CrossR/R    1.230      0.300   4.045 5.24e-05 ***
CrossR/W    0.320      0.267   1.198  0.23077    
CrossW/R   -2.000      0.330  -6.042 1.52e-09 ***
CrossW/W    0.920      0.300   3.084  0.00204 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Variance Components for Random Effects (P-values are one-tailed):
  Estimate Std. Error z value Pr(>|z|)/2    
F     1.46       0.31   4.695   1.33e-06 ***
M     1.64       0.33   4.918   4.36e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
```

### gee

gee 包采用广义估计方程（Generalized Estimation Equation）方法

```{r}
#| eval: false

fit_gee <- gee::gee(y ~ x1 + x2 + offset(log(o)), id = g, 
  data = sim_data, family = poisson(link = "log"), corstr = "exchangeable"
)
# 输出
fit_gee
```

``` markdown
 GEE:  GENERALIZED LINEAR MODELS FOR DEPENDENT DATA
 gee S-function, version 4.13 modified 98/01/27 (1998) 

Model:
 Link:                      Logarithm 
 Variance to Mean Relation: Poisson 
 Correlation Structure:     Exchangeable 

Call:
gee::gee(formula = y ~ x1 + x2 + offset(log(o)), id = g, data = sim_data, 
    family = poisson(link = "log"), corstr = "exchangeable")

Number of observations :  2500 
Maximum cluster size   :  100 

Coefficients:
(Intercept)          x1          x2 
  0.6098935   0.3003721   0.2165055 

Estimated Scale Parameter:  4.979956
Number of Iterations:  3

Working Correlation[1:4,1:4]
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.7220617 0.7220617 0.7220617
[2,] 0.7220617 1.0000000 0.7220617 0.7220617
[3,] 0.7220617 0.7220617 1.0000000 0.7220617
[4,] 0.7220617 0.7220617 0.7220617 1.0000000

Returned Error Value:
[1] 0
```

输出结果中，尺度参数（Estimated Scale Parameter）的估计结果与随机效应的方差的联系？

### geepack

[geepack](https://cran.r-project.org/package=geepack) 包类似 **gee** 包。

```{r}
#| eval: false

fit_geepack <- geepack::geeglm(
  formula = y ~ x1 + x2, family = poisson(link = "log"),
  id = g, offset = log(o), data = sim_data,
  corstr = "exchangeable", scale.fix = FALSE
)
summary(fit_geepack)
```

``` markdown
Call:
geepack::geeglm(formula = y ~ x1 + x2, family = poisson(link = "log"), 
    data = sim_data, offset = log(o), id = g, corstr = "exchangeable", 
    scale.fix = FALSE)

 Coefficients:
            Estimate Std.err  Wald Pr(>|W|)    
(Intercept)  0.60964 0.17310  12.4 0.000428 ***
x1           0.30040 0.02353 163.1  < 2e-16 ***
x2           0.21653 0.01458 220.6  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Correlation structure = exchangeable 
Estimated Scale Parameters:

            Estimate Std.err
(Intercept)    4.975    1.39
  Link = identity 

Estimated Correlation Parameters:
      Estimate Std.err
alpha    0.723 0.06703
Number of clusters:   25  Maximum cluster size: 100 
```

### blme

blme 包采用贝叶斯估计

```{r}
fit_blme <- blme::bglmer(
  formula = y ~ x1 + x2 + (1 | g),
  data = sim_data, offset = log(o),
  family = poisson(link = "log")
)
summary(fit_blme)
```

GLMMadaptive、glmmML、gee、geepack 和 lme4 的模型输出结果是接近的。

### brms

```{r}
#| eval: false

fit_brms <- brms::brm(
  y ~ x1 + x2 + (1 | g) + offset(log(o)),
  data = sim_data, family = poisson(link = "log"),
  silent = 2, refresh = 0, seed = 20232023
)
summary(fit_brms)
```

``` markdown
 Family: poisson 
  Links: mu = log 
Formula: y ~ x1 + x2 + (1 | g) + offset(log(o)) 
   Data: sim_data (Number of observations: 2500) 
  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~g (Number of levels: 25) 
              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sd(Intercept)     0.68      0.11     0.51     0.94 1.01      295      491

Population-Level Effects: 
          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
Intercept     0.56      0.14     0.31     0.85 1.02      297      344
x1            0.28      0.01     0.26     0.31 1.00     1053     1625
x2            0.21      0.01     0.18     0.23 1.01     1071     1298

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
```

### MCMCglmm

MCMCglmm 包采用贝叶斯估计

```{r}
prior1 <- list(
  R = list(V = 1, fix = 1), 
  G = list(G1 = list(V = 1, nu = 0.002))
)
set.seed(20232023)
fit_mcmcglmm <- MCMCglmm::MCMCglmm(
  fixed = y ~ x1 + x2 + offset(log(o)),
  random = ~g, family = "poisson", 
  data = sim_data, verbose = FALSE, prior = prior1
)
summary(fit_mcmcglmm)
```

随机效应的方差 G-structure 为 0.5443，则标准差为 0.738。

对于离散型响应变量，MCMCglmm 包默认添加一个可加的随机变量表示过度离散，如何将其去掉？将残差方差设置为常数，不再作为参数去估计，`fix = 1` 表示在 R-structure 中固定方差， `V = 1` 表示残差方差为 1。

```{r}
#| label: fig-fit-mcmcglmm
#| fig-cap: 方差协方差参数的后验分布
#| fig-showtext: true
#| fig-width: 6
#| fig-height: 6

# 固定效应参数的后验分布
# plot(fit_mcmcglmm$Sol)
plot(fit_mcmcglmm$VCV)
```

根据响应变量的服从的分布类型，确定调整因子。固定效应乘以调整因子的平方根，随机效应的方差乘以调整因子，详见 [@diggle2002] 第 136-137 页。二项分布联系函数对应的调整因子如下：

$$
\frac{1 + c^2\sigma^2_{\epsilon}}{1 + c^2\sigma^2_{\mathrm{units}}}
$$

其中， $c$ 是与联系函数有关的常数，二项分布联系函数对应 $c = 16\sqrt{3}/(15\pi)$。此处，假定 $\sigma^2_{\epsilon} = 0$ ，代入泊松分布对应的调整因子。调整后的固定效应（回归系数）、随机效应的方差如下：

```{r}
#| eval: false

# 调整公式中的调整因子 c2 取决于联系函数
c2 <- ((16 * sqrt(3))/(15 * pi))^2 # 需要修改为泊松分布对应的值
# 固定效应的调整
adjusted_sol <- fit_mcmcglmm$Sol / sqrt(1 + c2 * fit_mcmcglmm$VCV[, 2])
plot(adjusted_sol)
# 随机效应的方差调整
adjusted_vcv <- fit_mcmcglmm$VCV[, 1] / (1 + c2 * fit_mcmcglmm$VCV[, 2])
plot(adjusted_vcv)
```

### INLA

```{r}
library(INLA)
fit_inla <- inla(
  formula = y ~ x1 + x2 + f(g, model = "iid", n = 25),
  E = o, family = "poisson", data = sim_data
)
summary(fit_inla)
```

随机效应的标准（偏）差为 $1/\sqrt{\mathrm{Precision}}$ ，即 0.625。

## 总结 {#sec-mixed-effects-summary}

本章介绍函数 `MASS::glmmPQL()`、 `nlme::lme()`、`lme4::lmer()` 和 `brms::brm()` 的用法，以及它们求解线性混合效应模型的区别和联系。在贝叶斯估计方法中，**brms** 包和 **INLA** 包都支持非常丰富的模型种类，前者是贝叶斯精确推断，后者是贝叶斯近似推断，**brms** 基于概率编程语言 Stan 框架打包了许多模型的 Stan 实现，INLA 基于求解随机偏微分方程的有限元方法和拉普拉斯近似技巧，将各类常见统计模型统一起来，计算速度快，计算结果准确。

1.  函数 `nlme::lme()` 提供极大似然估计和限制极大似然估计。
2.  函数 `MASS::glmmPQL()` 惩罚拟似然估计，MASS 是依赖 nlme 包， nlme 不支持模型中添加漂移项，所以函数 `glmmPQL()` 也不支持添加漂移项。
3.  函数 `lme4::lmer()` 拉普拉斯近似关于随机效应的高维积分。
4.  函数 `brms::brm()` 汉密尔顿蒙特卡罗抽样。HMC 方法结合自适应步长的采样器 NUTS 来抽样。
5.  函数 `INLA::inla()` 集成嵌套拉普拉斯近似。

| 模型                 | nlme     | MASS        | lme4      | GLMMadaptive    | brms    |
|------------|------------|------------|------------|------------|------------|
| 线性混合效应模型     | `lme()`  | `glmmPQL()` | `lmer()`  | 不支持          | `brm()` |
| 广义线性混合效应模型 | 不支持   | `glmmPQL()` | `glmer()` | `mixed_model()` | `brm()` |
| 非线性混合效应模型   | `nlme()` | 不支持      | `nlmer()` | 不支持          | `brm()` |

: 混合效应模型及相关 R 包拟合函数 {#tbl-mixed-models}

通过对频率派和贝叶斯派方法的比较，发现一些有意思的结果。与 Stan 不同，INLA 包做近似贝叶斯推断，计算效率很高。

INLA 软件能处理上千个高斯随机效应，但最多只能处理 15 个超参数，因为 INLA 使用 CCD 处理超参数。如果使用 MCMC 处理超参数，就有可能处理更多的超参数，Daniel Simpson 等把 Laplace approximation 带入 Stan，这样就可以处理上千个超参数。 更多理论内容见 2009 年 INLA 诞生的[论文](https://inla.r-inla-download.org/r-inla.org/papers/inla-rss.pdf)和《Advanced Spatial Modeling with Stochastic Partial Differential Equations Using R and INLA》中第一章的估计方法 [CCD](https://becarioprecario.bitbucket.io/spde-gitbook/ch-INLA.html#estimation-method)。

## 习题 {#sec-mixed-effects-models-exercise}

1.  基于奥克兰火山地形数据集 volcano ，随机拆分成训练数据和测试数据，训练数据可以看作采样点的观测数据，建立高斯过程回归模型，比较测试数据与未采样的位置上的预测数据，在计算速度、准确度、易用性等方面总结 Stan 和 INLA 的特点。

2.  基于 `PlantGrowth` 数据集，比较将 `group` 变量视为随机变量与随机效应的异同？

    ```{r}
    #| eval: false

    fit_lm <- lm(weight ~ group, data = PlantGrowth)
    summary(fit_lm)
    fit_lme <- nlme::lme(weight ~ 1, random = ~ 1 | group, data = PlantGrowth)
    summary(fit_lme)
    fit_lme4 <- lme4::lmer(weight ~ 1 + (1 | group), data = PlantGrowth)
    summary(fit_lme4)
    ```

3.  基于 **MASS** 包的地形数据集 topo，建立高斯过程回归模型，比较贝叶斯预测与克里金插值预测的效果。

    ```{r}
    #| eval: false
    #| code-fold: true
    #| echo: !expr knitr::is_html_output()

    data(topo, package = "MASS")
    set.seed(20232023)
    nchains <- 2 # 2 条迭代链
    # 给每条链设置不同的参数初始值
    inits_data_gaussian <- lapply(1:nchains, function(i) {
      list(
        beta = rnorm(1),
        sigma = runif(1),
        phi = runif(1),
        tau = runif(1)
      )
    })
    # 预测区域网格化
    nx <- ny <- 27
    topo_grid_df <- expand.grid(
      x = seq(from = 0, to = 6.5, length.out = nx),
      y = seq(from = 0, to = 6.5, length.out = ny)
    )
    # 对数高斯模型
    topo_gaussian_d <- list(
      N1 = nrow(topo), # 观测记录的条数
      N2 = nrow(topo_grid_df),
      D = 2, # 2 维坐标
      x1 = topo[, c("x", "y")], # N x 2 坐标矩阵
      x2 = topo_grid_df[, c("x", "y")],
      y1 = topo[, "z"] # N 向量
    )
    library(cmdstanr)
    # 编码
    mod_topo_gaussian <- cmdstan_model(
      stan_file = "code/gaussian_process_pred.stan",
      compile = TRUE, cpp_options = list(stan_threads = TRUE)
    )
    # 高斯过程回归模型
    fit_topo_gaussian <- mod_topo_gaussian$sample(
      data = topo_gaussian_d,   # 观测数据
      init = inits_data_gaussian,   # 迭代初值
      iter_warmup = 500,            # 每条链预处理迭代次数
      iter_sampling = 1000,         # 每条链总迭代次数
      chains = nchains,             # 马尔科夫链的数目
      parallel_chains = 2,      # 指定 CPU 核心数，可以给每条链分配一个
      threads_per_chain = 1,    # 每条链设置一个线程
      show_messages = FALSE,    # 不显示迭代的中间过程
      refresh = 0,              # 不显示采样的进度
      output_dir = "data-raw/",
      seed = 20232023           
    )
    # 诊断
    fit_topo_gaussian$diagnostic_summary()
    # 对数高斯模型
    fit_topo_gaussian$summary(
      variables = c("lp__", "beta", "sigma", "phi", "tau"),
      .num_args = list(sigfig = 4, notation = "dec")
    )
    # 未采样的位置的预测值
    ypred <- fit_topo_gaussian$summary(variables = "ypred", "mean")
    # 预测值
    topo_grid_df$ypred <- ypred$mean
    # 整理数据
    library(sf)
    topo_grid_sf <- st_as_sf(topo_grid_df, coords = c("x", "y"), dim = "XY")
    library(stars)
    # 26x26 的网格
    topo_grid_stars <- st_rasterize(topo_grid_sf, nx = 26, ny = 26)

    library(ggplot2)
    ggplot() +
      geom_stars(data = topo_grid_stars, aes(fill = ypred)) +
      scale_fill_viridis_c(option = "C") +
      theme_bw()
    ```

4.  用 **brms** 包实现贝叶斯高斯过程回归模型，考虑用样条近似高斯过程以加快计算。提示：**brms** 包的函数 `gp()` 的参数 $k$ 表示近似高斯过程 GP 所用的基函数的数目。截止写作时间，函数 `gp()` 的参数 `cov` 只能取指数二次核函数 exponentiated-quadratic kernel 。

    ```{r}
    #| eval: false
    #| code-fold: true
    #| echo: !expr knitr::is_html_output()

    # 高斯过程近似计算
    bgamm2 <- brms::brm(
      z ~ gp(x, y, cov = "exp_quad", c = 5 / 4, k = 50),
      data = topo, chains = 2, seed = 20232023,
      warmup = 1000, iter = 2000, thin = 1, refresh = 0,
      control = list(adapt_delta = 0.99)
    )
    # 输出结果
    summary(bgamm2)
    # 条件效应
    me3 <- brms::conditional_effects(bgamm1, ndraws = 200, spaghetti = TRUE)
    # 绘制图形
    plot(me3, ask = FALSE, points = TRUE)
    ```
