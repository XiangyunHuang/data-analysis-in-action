# 网络分析 {#sec-analysis-network-data}

## R 语言社区规模 {#sec-community-capacity}

从 CRAN 上的 R 包及其开发者数量来看看目前 R 语言社区规模。

```{r}
#| eval: false
#| echo: true

# 设置就近的 CRAN 镜像站点
Sys.setenv(R_CRAN_WEB = "https://mirrors.tuna.tsinghua.edu.cn/CRAN")
# 获取 R 包元数据
pdb <- tools::CRAN_package_db()
```

```{r}
#| label: cran-package-metadata
#| echo: false

pdb <- readRDS(file = "data/cran-package-db-20221231.rds")
```

截止 2022-12-31 CRAN 上发布的 R 包有 18976 个，CRAN 进入年末维护期 2022-12-22 至 2023-01-05。

```{r}
pdb <- subset(
  x = pdb, subset = !duplicated(Package),
  select = c(
    "Package", "Maintainer", "License",
    "Title", "Date", "Published"
  )
)
```

距离上次更新的时间分布，有的包是一周内更新的，也有的是 10 多年未更新的。

```{r}
pdb$date_diff <- as.integer(as.Date("2022-12-31") - as.Date(pdb$Published))
```

根据发布日期 Published 构造新的一列 --- 发布年份。

```{r}
pdb$published_year <- as.integer(format(as.Date(pdb$Published), "%Y"))
```

然后按年统计更新的 R 包数量，如 @fig-updated-package 所示，过去 1 年内更新的 R 包有 8112 个（包含新出现的 R 包），占总数 8112 / 18976 = 42.75%，过去 2 年内更新的 R 包有 11553 个，占总数 11553 / 18976 = 60.88%，这个占比越高说明社区开发者越活跃。还可以换个说法，以 2020 年为例，总数 18976 个 R 包当中有 2470 个 R 包的更新日期停留在 2020 年，占比 2470 / 18976 = 13.02%。

```{r}
#| label: fig-updated-package
#| fig-cap: "CRAN 上 R 包的更新情况"
#| fig-showtext: true
#| fig-width: 5
#| fig-height: 3.5

library(ggplot2)
aggregate(data = pdb, Package ~ published_year, FUN = length) |>
  ggplot(aes(x = published_year, y = Package)) +
  geom_col(fill = NA, color = "gray20") +
  theme_classic() +
  coord_cartesian(expand = F) +
  labs(x = "年份", y = "R 包数量")
```

截止 2022-12-31，CRAN 上 R 包的维护者有 10049 人，其中有多少人在 2022 年更新了自己的 R 包呢？有 4820 个维护者，占比 47.96%，也就是说 2022 年，有 4820 个开发者更新了 8112 个 R 包，人均更新 1.68 个 R 包，下 @fig-active-maintainer 按 R 包发布年份统计开发者数量。

```{r}
#| label: fig-active-maintainer
#| fig-cap: "CRAN 上的维护者活跃情况"
#| fig-showtext: true
#| fig-width: 5
#| fig-height: 3.5

# 清理维护者字段，同一个开发者可能有多个邮箱
pdb$Maintainer2 <- sub(pattern = "<.*?>", replacement = "", x = pdb$Maintainer)
pdb$Maintainer2 <- trimws(pdb$Maintainer2, which = "both", whitespace = "[ \t\r\n]")
pdb$Maintainer2 <- tolower(pdb$Maintainer2)
# 维护者总数
# length(unique(pdb$Maintainer2))

aggregate(
  data = pdb, Maintainer2 ~ published_year,
  FUN = function(x) {
    length(unique(x))
  }
) |>
  ggplot(aes(x = published_year, y = Maintainer2)) +
  geom_col(fill = NA, color = "gray20") +
  theme_classic() +
  coord_cartesian(expand = F) +
  labs(x = "年份", y = "开发者数量")
```

与 2023 年 12 月 31 日的数据比较。

## R 语言社区的组织

有的组织基本停止了开发，如[Omegahat](https://github.com/omegahat)，有的被商业公司收购后，不再活跃了，如[Revolution Analytics](https://github.com/RevolutionAnalytics)。

除了众所周知的 [tidyverse](https://github.com/tidyverse/tidyverse) [@Wickham2019] 和 [tidymodels](https://github.com/tidymodels/tidymodels) [@Kuhn2020]，还有很多数据分析、建模的工具箱，如 [mlr3verse](https://github.com/mlr-org/mlr3verse) [@Lang2023]、[easystats](https://github.com/easystats/easystats) [@Makowski2022]、[strengejacke](https://github.com/strengejacke/strengejacke) [@Daniel2019] 和 [DrWhy](https://github.com/ModelOriented/DrWhy) [@DrWhy2023]。

不存在明显的规律，因此下面从开发者的邮箱出发，隶属企业、组织往往有统一的邮箱后缀。

```{r}
# 抽取邮件后缀
str_extract <- function(text, pattern, ...) regmatches(text, regexpr(pattern, text, ...))
# 移除 ORPHANED
pdb <- subset(pdb, subset = Maintainer != "ORPHANED")
# email
pdb$Email <- str_extract(text = pdb$Maintainer, pattern = "<.*?>")
# email_suffix
pdb$Email_suffix <- sub(x = pdb$Email, pattern = ".*?@(.*?)>", replacement = "\\1")
```

按组织统计扩展包的数量（总的 R 包数量约 2 万），各个组织贡献的 R 包

```{r}
pdb_pkg <- aggregate(
  data = pdb, Package ~ Email_suffix,
  FUN = function(x) {
    length(unique(x))
  }
)

head(pdb_pkg[order(pdb_pkg$Package, decreasing = TRUE), ], 20)
```

邮件服务提供商。6968 个 R 包使用 gmail 邮箱作为联系维护者的方式，googlemail.com 也是谷歌提供的服务。hotmail.com 和 outlook.com 都是微软提供的邮箱服务，outlook.fr 也是，除此之外，比较大的邮件服务提供商就是 163.com、 protonmail.com 和 yahoo.com 等。

商业组织。208 个 R 包来自 RStudio 公司的员工，这些维护者使用 RStudio 公司提供的邮箱。

开源组织。R-project.org 和 r-project.org 都是 R 语言组织的联系方式，自不必多说，R 语言核心团队成员不仅维护 R 软件源码，还维护了很多 R 包。debian.org 是 Debian 组织的联系方式，都是开源组织（Open Source Org）。

大学学院机构。berkeley.edu 、umich.edu 等以 edu 结尾的北美（国）的大学，gmx.de、 posteo.de 等以 de 结尾的德国大学，ucl.ac.uk 等以 uk 结尾的英国的大学，auckland.ac.nz 等以 nz 结尾的新西兰的大学，uwaterloo.ca 等以 ca 结尾的加拿大的大学。

按组织统计开发者的数量（总的开发者数量约 1 万），各个组织的 R 包开发者。

```{r}
pdb_org <- aggregate(
  data = pdb, Maintainer2 ~ Email_suffix,
  FUN = function(x) {
    length(unique(x))
  }
)

head(pdb_org[order(pdb_org$Maintainer2, decreasing = TRUE), ], 20)
```

大部分开发者采用邮件服务提供商的邮件地址。3795 个开发者使用来自谷歌的 gmail.com、196 个开发者使用来自微乳的 hotmail.com 和 outlook.com，57 个开发者使用来自网易的 163.com，51 个开发者使用来自雅虎的 yahoo.com，46 个开发者使用来自 Proton 的 protonmail.com。

其一马太效应，往头部集中，其二，长尾分布，尾部占比接近甚至超过 50%。1666 个开发者来自以 edu 为后缀的邮箱。

```{r}
sum(pdb_org[grepl(pattern = "edu$", x = pdb_org$Email_suffix), "Maintainer2"])
```

各个大学及其 R 包开发者数据

```{r}
pdb_org_edu <- pdb_org[grepl(pattern = "edu$", x = pdb_org$Email_suffix), ]
pdb_org_edu[order(pdb_org_edu$Maintainer2, decreasing = TRUE), ] |> head(20)
```

好吧，几乎全是美国各个 NB 大学的，比如华盛顿大学（ uw.edu）、密歇根大学（umich.edu）、加州伯克利大学（berkeley.edu）等等。顺便一说，欧美各个大学的网站，特别是统计院系很厉害的，已经帮大家收集得差不多了，有留学打算的读者自取，邮箱后缀就是学校/院官网。

有些邮箱后缀带有院系，但是并没有向上合并到学校这一级，比如 `stanford.edu` 、`stat.stanford.edu` 和 `alumni.stanford.edu` 等没有合并统计，所以排名仅供参考。有的邮箱来自教育机构，但是不以 `edu` 结尾，实际使用 `edu` 邮箱的教育机构大部份位于美国，比如新西兰奥克兰大学 `auckland.ac.nz` 瑞士苏黎世联邦理工学院 `stat.math.ethz.ch`如果读者还知道其他一般规律的，或者提供大学邮箱列表或者有其它更好的办法，就可以把这个数字做得更加精准一些。只是改变这个结论恐怕很难。

```{r}
#| label: tbl-cran-developers
#| tbl-cap: "CRAN 团队开发维护 R 包数量情况"
#| tbl-subcap:
#|   - "表"
#|   - "续表"
#| layout-ncol: 2
#| code-fold: true
#| echo: !expr knitr::is_html_output()
#| comment: NA

core_dev <- subset(pdb,
  subset = grepl(
    x = Maintainer,
    pattern = paste0(c(
      "(@[Rr]-project\\.org)",
      "(ripley@stats.ox.ac.uk)", # Brian Ripley
      "(p.murrell@auckland.ac.nz)", # Paul Murrell
      "(paul@stat.auckland.ac.nz)", # Paul Murrell
      "(maechler@stat.math.ethz.ch)", # Martin Maechler
      "(mmaechler+Matrix@gmail.com)", # Martin Maechler
      "(bates@stat.wisc.edu)", # Douglas Bates
      "(pd.mes@cbs.dk)", # Peter Dalgaard
      "(ligges@statistik.tu-dortmund.de)", # Uwe Ligges
      "(tlumley@u.washington.edu)", # Thomas Lumley
      "(t.lumley@auckland.ac.nz)", # Thomas Lumley
      "(martyn.plummer@gmail.com)", # Martyn Plummer
      "(luke-tierney@uiowa.edu)", # Luke Tierney
      "(stefano.iacus@unimi.it)", # Stefano M. Iacus
      "(murdoch.duncan@gmail.com)", # Duncan Murdoch
      "(michafla@gene.com)" # Michael Lawrence
    ), collapse = "|")
  ),
  select = c("Package", "Maintainer")
) |>
  transform(Maintainer = gsub(
    x = Maintainer,
    pattern = '(<([^<>]*)>)|(")',
    replacement = ""
  )) |>
  transform(Maintainer = gsub(
    x = Maintainer,
    pattern = "(R-core)|(R Core Team)",
    replacement = "CRAN Team"
  )) |>
  transform(Maintainer = gsub(
    x = Maintainer,
    pattern = "(S. M. Iacus)|(Stefano M.Iacus)|(Stefano Maria Iacus)",
    replacement = "Stefano M. Iacus"
  )) |>
  transform(Maintainer = gsub(
    x = Maintainer,
    pattern = "(Toby Hocking)",
    replacement = "Toby Dylan Hocking"
  )) |>
  transform(Maintainer = gsub(
    x = Maintainer,
    pattern = "(John M Chambers)",
    replacement = "John Chambers"
  ))

tmp <- aggregate(data = core_dev, Package ~ Maintainer, FUN = function(x) length(unique(x)))
tmp <- tmp[order(tmp$Package, decreasing = TRUE), ]

knitr::kable(head(tmp, ceiling(nrow(tmp) / 2)),
  col.names = c("团队成员", "R 包数量"), row.names = FALSE
)
knitr::kable(tail(tmp, floor(nrow(tmp) / 2)),
  col.names = c("团队成员", "R 包数量"), row.names = FALSE
)
```

Martin Maechler、Simon Urbanek、Kurt Hornik、Torsten Hothorn、Achim Zeileis 等真是高产呐！除了维护 R 语言核心代码，还开发维护了**20** 多个 R 包！以 Brian Ripley 为例，看看他都开发了哪些 R 包。

```{r}
subset(pdb,
  subset = grepl(
    x = Maintainer,
    pattern = "Brian Ripley"
  ),
  select = c("Package", "Title"), drop = TRUE
) |>
  unique(by = "Package") |>
  transform(Title = gsub(
    pattern = "(\\\n)",
    replacement = " ", x = Title
  )) |>
  knitr::kable(row.names = FALSE)
```

震惊！有一半收录在 R 软件中，所以已经持续维护 **20** 多年了。

::: sidebar
根据邮箱后缀匹配抽取的 R 包及开发者，规则也许不能覆盖所有的情况，读者若有补充，欢迎 PR 给我。举个例子，Brian Ripley 的邮箱 [ripley\@stats.ox.ac.uk](mailto:ripley@stats.ox.ac.uk){.email} 就不是一路，需要单独添加。
:::

```{r}
#| label: tbl-rstudio-developers
#| tbl-cap: "RStudio 团队开发维护 R 包数量情况（部分）"
#| tbl-subcap:
#|   - "表"
#|   - "续表"
#| layout-ncol: 2
#| code-fold: true
#| echo: !expr knitr::is_html_output()

extract_maintainer <- function(x) {
  x <- gsub(pattern = "<.*?>", replacement = "", x = x)
  x <- trimws(x, which = "both", whitespace = "[ \t\r\n]")
  x
}
rstudio_db <- subset(pdb,
  subset = grepl(x = Maintainer, pattern = "rstudio.com"),
  select = c("Package", "Maintainer")
) |>
  transform(Maintainer = extract_maintainer(Maintainer))

rstudio_db <- aggregate(data = rstudio_db, Package ~ Maintainer, FUN = function(x) length(unique(x)))
rstudio_db <- rstudio_db[order(rstudio_db$Package, decreasing = TRUE), ]

knitr::kable(head(rstudio_db, ceiling(nrow(rstudio_db) / 2)),
  col.names = c("团队成员", "R 包数量"), row.names = FALSE
)
knitr::kable(tail(rstudio_db, floor(nrow(rstudio_db) / 2)),
  col.names = c("团队成员", "R 包数量"), row.names = FALSE
)
```

在开发维护的 R 包里，谢益辉所给的联系邮箱是 [xie\@yihui.name](mailto:xie@yihui.name){.email}，就不在上述之列，因此，表中所列仅是部分而已。

CRAN 和 RStudio 团队是 R 语言社区最为熟悉的，其它团队需借助一些网络分析算法挖掘了。

## R 语言社区的开发者

最高产的开发者

```{r}
#| label: fig-top-maintainer
#| fig-showtext: true
#| fig-cap: 高产的 R 包开发者
#| fig-width: 6
#| fig-height: 5

pdb_ctb <- aggregate(data = pdb, Package ~ Maintainer, FUN = length)

ggplot(data = pdb_ctb[pdb_ctb$Package >= 20, ]) +
  geom_col(aes(x = Package, y = reorder(Maintainer, Package)), width = .1) +
  theme_classic() +
  labs(x = "R 包数量", y = "开发者")
```

开发 1 个 R 包的开发者有 7656 人，开发 2 个 R 包的开发者有 1678 人，第二名是第一名的五分之一，等

```{r}
table(pdb_ctb$Package)
```

过滤掉非常高产的开发者，可以发现变化规律服从幂律分布。

```{r}
#| label: fig-dist-maintainer
#| fig-cap: 开发者数量的分布
#| fig-subcap:
#| - 直方图
#| - 直方图（对数尺度）
#| fig-width: 4
#| fig-height: 3
#| fig-showtext: true
#| layout-ncol: 2

ggplot(data = pdb_ctb, aes(x = Package)) +
  geom_histogram(binwidth = 1) +
  theme_classic() +
  labs(x = "R 包数量", y = "开发者")

ggplot(data = pdb_ctb[pdb_ctb$Package <= 20, ], aes(x = Package)) +
  geom_histogram(binwidth = 1, fill = NA, color = "gray20") +
  scale_y_log10() +
  theme_classic() +
  labs(x = "R 包数量", y = "开发者")
```

最高产 Top 1% 的开发者 117 人（开发 R 包超过 10 个的开发者）贡献了 2060 / 18976扩展包 10.8%，高产的是有组织的，商业、开源、学校。

最低产 Bottom 的开发者 7656 人（仅开发一个 R 包的开发者） 贡献了 7656 / 18976 扩展包 40.3 %，低产的人是主体。

```{r}
sum(pdb_ctb[pdb_ctb$Package > 10, "Package"])
```

高产的人是很少的，贡献的 R 包占比是很小的，其影响力如何评估？低产的人是绝对的大多数，如何促进低产的人走向高产和扩展影响力？

## R 语言社区的扩展包

R 包的影响力，被多少 R 包依赖，A 被 B 依赖，B 被 C 依赖，以此类推，A 被依赖的深度。
