# ggplot2 食谱 {#sec-ggplot2-cookbook}

```{r}
#| echo: false

source("_common.R")
```


## 坐标系统 {#sec-coord}

继续以数据集 gapminder_2007 展示坐标变换在柱状图、条形图、饼图中的作用，首先来看笛卡尔坐标系下的柱状图。

```{r}
#| label: fig-gapminder-2007-income
#| fig-cap: "笛卡尔坐标系下的柱形图"
#| fig-width: 4
#| fig-height: 3
#| fig-showtext: true

library(ggplot2)
library(scales)
gapminder <- readRDS(file = "data/gapminder-2020.rds")
gapminder_2007 <- gapminder[gapminder$year == 2007, ]
ggplot(gapminder_2007, aes(x = income_level)) + 
  geom_bar(stat = "count") +
  theme_classic() +
  labs(x = "收入水平", y = "国家数量")
```

:::{.callout-tip}

@fig-gapminder-2007-income 等价于 @fig-gapminder-2007-income-stat

```{r}
#| label: fig-gapminder-2007-income-stat
#| fig-cap: "笛卡尔坐标系下的柱形图"
#| fig-width: 4
#| fig-height: 3
#| fig-showtext: true

ggplot(gapminder_2007, aes(x = income_level, y = after_stat(count))) + 
  geom_bar(stat = "count") +
  theme_classic() +
  labs(x = "收入水平", y = "国家数量")
```
:::

翻转

```{r}
#| label: fig-gapminder-2007-income-flip
#| fig-cap: "笛卡尔坐标系下的条形图"
#| fig-width: 4
#| fig-height: 3
#| fig-showtext: true

ggplot(gapminder_2007, aes(x = income_level)) + 
  geom_bar(stat = "count") +
  coord_flip() +
  theme_classic() +
  labs(x = "收入水平", y = "国家数量")
```


极坐标变换

```{r}
#| label: fig-gapminder-2007-income-polar
#| fig-cap: "极坐标系下的条形图"
#| fig-width: 4
#| fig-height: 3
#| fig-showtext: true

ggplot(gapminder_2007, aes(x = income_level)) + 
  geom_bar(stat = "count") +
  coord_polar() +
  theme_minimal() +
  labs(x = NULL, y = NULL)
```

极坐标变换

```{r}
#| label: fig-gapminder-2007-income-polar-theta
#| fig-cap: "极坐标系下的柱形图"
#| fig-width: 4
#| fig-height: 3
#| fig-showtext: true

ggplot(gapminder_2007, aes(x = income_level)) + 
  geom_bar(stat = "count") +
  coord_polar(theta = "y") +
  theme_minimal() +
  labs(x = NULL, y = NULL)
```

笛卡尔坐标系下的分组堆积柱形图

```{r}
#| label: fig-gapminder-2007-income-region
#| fig-cap: "笛卡尔坐标系下的分组堆积柱形图"
#| fig-width: 6
#| fig-height: 4
#| fig-showtext: true

ggplot(gapminder_2007, aes(x = income_level, fill = region)) + 
  geom_bar(stat = "count") +
  theme_classic() +
  labs(x = "收入水平", y = "国家数量", fill = "区域")
```

笛卡尔坐标系下的分组百分比堆积条形图

```{r}
#| label: fig-gapminder-2007-income-region-fill
#| fig-cap: "笛卡尔坐标系下的分组百分比堆积条形图"
#| fig-width: 6
#| fig-height: 4
#| fig-showtext: true

ggplot(gapminder_2007, aes(x = income_level, fill = region)) + 
  geom_bar(stat = "count", position = "fill") +
  scale_y_continuous(labels = scales::percent) +
  theme_classic() +
  labs(x = "收入水平", y = "国家数量的占比", fill = "区域")
```


极坐标系下的分组柱形图

```{r}
#| label: fig-gapminder-2007-clarity-polar
#| fig-cap: "极坐标系下的分组柱形图"
#| fig-width: 5
#| fig-height: 3
#| fig-showtext: true

ggplot(gapminder_2007, aes(x = income_level, fill = region)) +
  geom_bar(stat = "count") +
  coord_polar() +
  theme_minimal() +
  labs(x = "收入水平", y = "国家数量", fill = "区域")
```


极坐标系下的分组柱形图

```{r}
#| label: fig-gapminder-2007-clarity-polar-fill
#| fig-cap: "极坐标系下的分组百分比堆积柱形图"
#| fig-width: 5
#| fig-height: 3
#| fig-showtext: true

ggplot(gapminder_2007, aes(x = income_level, fill = region)) +
  geom_bar(stat = "count", position = "fill") +
  scale_y_continuous(labels = scales::percent) +
  coord_polar() +
  theme_minimal() +
  labs(x = "收入水平", y = "国家数量的占比", fill = "区域")
```


极坐标系下的分组柱形图

```{r}
#| label: fig-gapminder-2007-clarity-polar-theta
#| fig-cap: "极坐标系下的分组柱形图"
#| fig-width: 5
#| fig-height: 3
#| fig-showtext: true

ggplot(gapminder_2007, aes(x = income_level, fill = region)) + 
  geom_bar(stat = "count") +
  coord_polar(theta = "y") +
  theme_minimal() +
  labs(x = NULL, y = NULL, fill = "区域")
```



## 插入公式 {#sec-math}

**ggplot2** 包内置了一些的数学公式解析和表达能力

形状参数分别为 $a$ 和 $b$ 的贝塔分布的概率密度函数如下：

$$
f(x;a,b) = \frac{\Gamma(a+b)}{\Gamma(a)\Gamma(b)}x^{a-1}(1-x)^{b-1}, \quad a>0,b>0,0\leq x \leq 1
$$

### plotmath

<!-- 适合全英文的环境 -->

Base R 内置的 plotmath 提供一套处理数学公式的方法，详见 `?plotmath`

@fig-beta-plotmath 中红线对应贝塔分布 $B(3,0.9)$ 而蓝线对应贝塔分布 $B(3,9)$

```{r}
#| label: fig-beta-plotmath
#| fig-cap: "贝塔分布的概率密度函数"
#| fig-width: 5
#| fig-height: 4
#| dev: !expr ifelse(knitr::is_latex_output(), "cairo_pdf", "png")

ggplot() +
  geom_function(
    fun = dbeta, args = list(shape1 = 3, shape2 = 0.9),
    colour = "#E41A1C", linewidth = 1.2,
  ) +
  geom_function(
    fun = dbeta, args = list(shape1 = 3, shape2 = 9),
    colour = "#377EB8", linewidth = 1.2
  ) +
  theme_classic() +
  labs(
    x = expression(x), y = expression(f(x)),
    title = expression(f(x) == frac(
      Gamma(a + b),
      Gamma(a) * Gamma(b)
    ) * x^{
      a - 1
    } * (1 - x)^{
      b - 1
    })
  )
```

<!-- 
警告：启用 showtext 包会导致数学公式中的括号 () 倾斜，公式和中文混合的情况还不好处理，还不能使用 cairo_pdf 设备保存图形。
-->


### latex2exp

[**latex2exp**](https://github.com/stefano-meschiari/latex2exp) 包仍然基于 plotmath，但提供 LaTeX 数学公式的书写方式，相比于 plotmath，使用上会更加方便。



```{r}
#| label: fig-beta-latex2exp
#| fig-cap: "贝塔分布的概率密度函数"
#| fig-width: 5
#| fig-height: 4
#| dev: !expr ifelse(knitr::is_latex_output(), "cairo_pdf", "png")

library(latex2exp)
ggplot() +
  geom_function(
    fun = dbeta, args = list(shape1 = 3, shape2 = 0.9),
    colour = "#E41A1C", linewidth = 1.2,
  ) +
  geom_function(
    fun = dbeta, args = list(shape1 = 3, shape2 = 9),
    colour = "#377EB8", linewidth = 1.2
  ) +
  theme_classic() +
  labs(
    x = TeX(r'($x$)'), y = TeX(r'($f(x)$)'),
    title = TeX(r'($f(x) = \frac{\Gamma(a+b)}{\Gamma(a)\Gamma(b)}x^{a-1}(1-x)^{b-1}$)')
  )
```


### tikzDevice

Ralf Stubner 维护的 [**tikzDevice**](https://github.com/daqana/tikzDevice) 包提供了另一种嵌入数学字体的方式，其提供的 `tikzDevice::tikz()` 绘图设备将图形对象转化为 TikZ 代码，调用 LaTeX 引擎编译成 PDF 文档。[**tikzDevice**](https://github.com/daqana/tikzDevice)包大大扩展了数学公式的处理能力，相比于 **latex2exp** 包，**tikzDevice** 调用 LaTeX 编译引擎处理数学公式，渲染的公式效果更加精美，支持的数学公式符号更多，不再局限于 plotmath 的能力。

首先安装一些所需的 LaTeX 宏包。

```{r}
#| echo: true
#| eval: false

tinytex::tlmgr_install("ctex", "fandol", "standalone", "sourcesanspro", "jknapltx")
```

设置默认的 LaTeX 编译引擎为 XeLaTeX，相比于 PDFLaTeX，它对中文的兼容性更好，支持多平台下的中文环境，中文字体这里采用了开源的 Fandol 字体，默认加载了 mathrsfs 宏包支持 `\mathcal`、`\mathscr` 等命令，此外， LaTeX 发行版采用谢益辉自定义的 [TinyTeX](https://yihui.org/tinytex/)。推荐的全局 LaTeX 环境配置如下：

```{r}
#| label: tikz-setup
#| echo: true

options(
  tinytex.engine = "xelatex",
  tikzDefaultEngine = "xetex",
  tikzDocumentDeclaration = "\\documentclass[tikz]{standalone}\n",
  tikzXelatexPackages = c(
    "\\usepackage[fontset=fandol]{ctex}",
    "\\usepackage[default,semibold]{sourcesanspro}",
    "\\usepackage{amsfonts,mathrsfs,amssymb}\n"
  )
)
```


再测试一下 LaTeX 编译环境是否正常。

```{r}
#| label: tikz-test
#| echo: true

tikzDevice::tikzTest()
```

确认没有问题后，下面 @fig-tikz-beta 的坐标轴标签，标题，图例等位置都支持数学公式，也支持中文，使用 **tikzDevice** 打造出版级的效果图。更多功能的介绍见 <https://www.daqana.org/tikzDevice/>。

```{r}
#| echo: false

# 用 magick 将 pdf 格式图片转化为 png 格式
to_png <- function(fig_path) {
  png_path <- sub("\\.pdf$", ".png", fig_path)
  magick::image_write(magick::image_read_pdf(fig_path),
    format = "png", path = png_path,
    density = 300, quality = 100
  )
  return(png_path)
}
```


```{r}
#| label: fig-tikz-beta
#| dev: 'tikz'
#| fig-cap: "TikZ 渲染的贝塔函数公式"
#| fig-process: !expr to_png
#| fig-width: 5
#| fig-height: 3.75

library(ggplot2)
ggplot() +
  geom_function(
    fun = dbeta, args = list(shape1 = 3, shape2 = 0.9),
    colour = "#E41A1C", linewidth = 1.5,
  ) +
  geom_function(
    fun = dbeta, args = list(shape1 = 3, shape2 = 9),
    colour = "#377EB8", linewidth = 1.5
  ) +
  theme_classic() +
  labs(
    x = "$x$", y = "$f(x)$",
    title = "$f(x) = \\frac{\\Gamma(a+b)}{\\Gamma(a)\\Gamma(b)}x^{a-1}(1-x)^{b-1}$"
  )
```


绘制独立的 PDF 图形的过程如下：

```{r}
#| eval: false
#| echo: true

library(tikzDevice)
tf <- file.path(getwd(), "tikz-beta.tex")
tikz(tf, width = 3, height = 2.5, pointsize = 30, standAlone = TRUE)
## 绘图代码 ##
dev.off()
# 编译成 PDF 图形
tinytex::latexmk(file = "tikz-beta.tex")
```


## 设置字体 {#sec-font}

### Noto 字体 {#sec-noto-fonts}

**showtext** [@Qiu2015] 是一个专用于处理中英文字体的 R 包，支持 Base R 和 **ggplot2** 绘图，支持调用系统已安装的字体，也支持调用给定路径下的字体，还支持各种奇形怪状的表情字体，更多内容见 (<https://github.com/yixuan/showtext>)，好玩的字体配合好玩的图形，可以玩出很多花样。

```{r}
#| eval: false
#| echo: true

## 简体中文宋体字
sysfonts::font_add(
  family = "Noto Serif CJK SC",
  regular = "NotoSerifCJKsc-Regular.otf",
  bold = "NotoSerifCJKsc-Bold.otf"
)
## 无衬线英文字体
sysfonts::font_add(
  family = "Noto Sans",
  regular = "NotoSans-Regular.ttf",
  bold = "NotoSans-Bold.ttf",
  italic = "NotoSans-Italic.ttf",
  bolditalic = "NotoSans-BoldItalic.ttf"
)
```

接下来查看在当前运行环境下，可供 **showtext** 包使用的字体。如果配置成功，输出的字体列表中会包含 `Noto Serif CJK SC` 和 `Noto Sans` 两款字体。

```{r}
#| label: font-families

sysfonts::font_families()
```

确认字体配置好了以后，全局默认字体为 Noto 无衬线英文字体，将所有标题处的字体设置为 Noto 系列的简体中文字体。通过与前面的 @fig-facet-ncol 比较，下 @fig-font 中的字体样式是明显不一样的。

```{r}
#| label: fig-font
#| fig-cap: "Noto 系列中英文字体"
#| fig-showtext: true
#| fig-width: 7
#| fig-height: 6

ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(data = function(x) subset(x, year == 2007),
             aes(fill = region, size = pop),
    show.legend = c(fill = TRUE, size = FALSE),
    shape = 21, col = "white"
  ) +
  scale_fill_manual(values = c(
    `拉丁美洲与加勒比海地区` = "#E41A1C", `撒哈拉以南非洲地区` = "#377EB8",
    `欧洲与中亚地区` = "#4DAF4A", `中东与北非地区` = "#984EA3",
    `东亚与太平洋地区` = "#FF7F00", `南亚` = "#FFFF33", `北美` = "#A65628"
  )) +
  scale_size(range = c(2, 12)) +
  scale_x_log10(labels = label_log(), limits = c(100, 110000)) +
  facet_wrap(facets = ~income_level, ncol = 3) +
  theme_classic(base_family = "Noto Sans") +
  theme(
    title = element_text(family = "Noto Serif CJK SC"),
    text = element_text(family = "Noto Serif CJK SC"),
    legend.position =  c(0.9, 0.20)
  ) +
  labs(x = "人均 GDP", y = "预期寿命", fill = "区域")
```

**ragg** 包 (<https://github.com/r-lib/ragg>) 无需手动配置字体，只要是系统已经安装的字体，在 **ggplot2** 绘图时，将字体名称传递给 `family` 即可。





### Emoji 字体 {#sec-emoji-fonts}



```{r}
#| label: fig-emoji
#| fig-cap: "emoji 字体"
#| fig-width: 5
#| fig-height: 4
#| dev: !expr ifelse(knitr::is_latex_output(), "cairo_pdf", "png")

dat <- data.frame(
  fruits = c("pineapple", "apple", "watermelon", "pear"),
  weight = c(5, 4, 3, 2)
)
# emo 字体
dat$fruits_emo <- sapply(dat$fruits, emo::ji)
ggplot(dat, aes(x = fruits_emo, y = weight)) +
  geom_text(aes(label = fruits_emo),
    size = 12, vjust = -0.5
  ) +
  scale_y_continuous(limits = c(2, 7)) +
  theme_classic() +
  theme(axis.title = element_text(family = "Noto Serif CJK SC")) +
  labs(x = "水果", y = "重量")
```

[**emojifont**](https://github.com/GuangchuangYu/emojifont) 包将 [Emoji 字体](https://github.com/ikatyang/emoji-cheat-sheet)引入 **ggplot2** 绘图，如 @fig-emojifont 所示。

```{r}
#| label: fig-emojifont
#| fig-cap: "制作含 Emoji 的图形"
#| fig-width: 5
#| fig-height: 4
#| fig-showtext: true

# emojifont::load.emojifont()
library(emojifont)
dat$fruits_emo <- emojifont::emoji(dat$fruits)
ggplot(dat, aes(x = fruits_emo, y = weight)) +
  geom_text(aes(label = fruits_emo, color = fruits_emo),
    size = 12, vjust = -0.5, family = "EmojiOne", show.legend = FALSE
  ) +
  scale_y_continuous(limits = c(2, 7)) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 20, family = "EmojiOne"),
        axis.text.y = element_text(family = "Noto Sans"),
        axis.title = element_text(family = "Noto Serif CJK SC")) +
  labs(x = "水果", y = "重量")
```


<!-- 
先加载 emojifont 包会导致 emo 包无法使用彩色字体，因为 emojifont 自动加载了字体和设备，emo 不能与 showtext 包同时使用。而且 plotmath 数学符号会变形，所以插入公式放在设置字体前面。

加载 emojifont 包会自动加载 Emoji 字体，而从命名空间导入字体 `emojifont::load.emojifont()` 同样会导致插入公式一节不能正常使用
-->


## 制作动画 {#sec-animation}


从 1991 年至2020 年，gapminder 数据集一共是 30 年的数据。 @sec-font 根据 2007 年的数据绘制了 @fig-font ，每年的数据绘制一幅图像，30 年总共可获得 30 帧图像，再以每秒播放 5 帧图像的速度将 30 帧图像合成 GIF 动画。因此，设置这个动画总共 30 帧，每秒播放的图像数为 5。

```{r}
options(gganimate.nframes = 30, gganimate.fps = 5)
```

**gganimate** 包提供一套代码风格类似 **ggplot2** 包的动态图形语法，可以非常顺滑地与之连接。在了解了 ggplot2 绘制图形的过程后，用 **gganimate** 包制作动画是非常容易的。**gganimate** 包会调用 **gifski** (<https://github.com/r-rust/gifski>) 包来合成动画，因此，除了安装 **gganimate** 包，还需要安装 **gifski** 包。接着，在已有的 **ggplot2** 绘图代码基础上，再追加一个转场图层函数 `transition_time()`，这里是按年逐帧展示图像，因此，其转场的时间变量为 gapminder 数据集中的变量 `year`。

```{r}
#| label: fig-animate-facets
#| fig-cap: "生成 GIF 动画"
#| fig-width: 7
#| fig-height: 6
#| fig-showtext: true
#| fig-show: "animate"
#| cache: true

library(gganimate)
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(color = region, size = pop),
    show.legend = c(color = TRUE, size = TRUE)
  ) +
  scale_color_manual(values = c(
    `拉丁美洲与加勒比海地区` = "#E41A1C", `撒哈拉以南非洲地区` = "#377EB8",
    `欧洲与中亚地区` = "#4DAF4A", `中东与北非地区` = "#984EA3",
    `东亚与太平洋地区` = "#FF7F00", `南亚` = "#FFFF33", `北美` = "#A65628"
  )) +
  scale_size(range = c(2, 12), labels = label_number(scale_cut = cut_short_scale())) +
  scale_x_log10(labels = label_log(), limits = c(10, 130000)) +
  facet_wrap(facets = ~income_level) +
  theme_classic(base_family = "Noto Sans") +
  theme(
    title = element_text(family = "Noto Serif CJK SC"),
    text = element_text(family = "Noto Serif CJK SC")
  ) +
  labs(
    title = "{frame_time} 年", x = "人均 GDP",
    y = "预期寿命", size = "人口总数", color = "区域"
  ) +
  transition_time(time = year)
```


```{r}
#| label: fig-animate-region
#| fig-cap: "生成 GIF 动画"
#| fig-width: 7
#| fig-height: 7
#| fig-showtext: true
#| fig-show: "animate"
#| cache: true

ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(color = income_level, size = pop),
    show.legend = c(color = TRUE, size = TRUE)
  ) +
  scale_color_brewer(palette = "RdYlGn") +
  scale_radius(range = c(1, 6), trans = "log10",
             labels = label_number(scale_cut = cut_short_scale())) +
  scale_x_log10(labels = label_log(), limits = c(10, 130000)) +
  facet_wrap(facets = ~region, ncol = 3) +
  theme_classic(base_family = "Noto Sans") +
  theme(
    title = element_text(family = "Noto Serif CJK SC"),
    text = element_text(family = "Noto Serif CJK SC")
  ) +
  labs(
    title = "{frame_time} 年", x = "人均 GDP",
    y = "预期寿命", size = "人口总数", color = "收入水平"
  ) +
  transition_time(time = year)
```


去掉分面

```{r}
#| label: fig-animate-scale
#| fig-cap: "生成 GIF 动画"
#| fig-width: 7
#| fig-height: 5
#| fig-showtext: true
#| fig-show: "animate"
#| cache: true

# 刻度线位置
mb <- unique(as.numeric(1:10 %o% 10^(1:4)))
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(color = region, size = pop),
             show.legend = c(color = TRUE, size = TRUE)
  ) +
  scale_color_manual(values = c(
    `拉丁美洲与加勒比海地区` = "#E41A1C", `撒哈拉以南非洲地区` = "#377EB8",
    `欧洲与中亚地区` = "#4DAF4A", `中东与北非地区` = "#984EA3",
    `东亚与太平洋地区` = "#FF7F00", `南亚` = "#FFFF33", `北美` = "#A65628"
  )) +
  scale_radius(range = c(1, 6), trans = "log10",
             labels = label_number(scale_cut = cut_short_scale())) +
  scale_x_log10(labels = label_dollar(), minor_breaks = mb, limits = c(10, 130000)) +
  scale_y_continuous(n.breaks = 6) +
  theme_classic(base_family = "Noto Sans") +
  theme(
    title = element_text(family = "Noto Serif CJK SC"),
    text = element_text(family = "Noto Serif CJK SC"),
    panel.grid.major = element_line(),
    panel.grid.minor.x = element_line()
  ) +
  labs(
    title = "{frame_time} 年", x = "人均 GDP",
    y = "预期寿命", size = "人口总数", color = "区域"
  ) +
  transition_time(time = year)
```




## 组合图形 {#sec-patchwork}

[**patchwork**](https://github.com/thomasp85/patchwork) 包提供了一套非常简洁的语法，用来组合多个 ggplot2 图形。如 @fig-patchwork 所示，用散点图分别绘制 2002 年和 2007 年的数据，并将图形肩并肩的并排展示。


```{r}
#| label: fig-patchwork
#| fig-cap: "左右组合"
#| fig-width: 8
#| fig-height: 4
#| fig-showtext: true

p1 <- ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(data = function(x) subset(x, year == 2020),
             aes(color = income_level, size = pop)) +
  scale_color_brewer(palette = "RdYlGn") +
  scale_radius(range = c(1, 6), trans = "log10",
               labels = label_number(scale_cut = cut_short_scale())) +
  scale_x_log10(labels = label_log(), limits = c(10, 130000)) +
  theme_minimal() +
  labs(
    title = "2020 年", x = "人均 GDP",
    y = "预期寿命", size = "人口总数", color = "收入水平"
  )

p2 <- ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(data = function(x) subset(x, year == 2010),
             aes(color = income_level, size = pop)) +
  scale_color_brewer(palette = "RdYlGn") +
  scale_radius(range = c(1, 6), trans = "log10",
               labels = label_number(scale_cut = cut_short_scale())) +
  scale_x_log10(labels = label_log(), limits = c(10, 130000)) +
  theme_minimal() +
  labs(
    title = "2010 年", x = "人均 GDP",
    y = "预期寿命", size = "人口总数", color = "收入水平"
  )

library(patchwork)
p1 | p2
```

除了用竖线 `|` 左右并排，还可以用斜杠 `/` 做上下排列，见下 @fig-patchwork-updown 。

```{r}
#| label: fig-patchwork-updown
#| fig-cap: "上下组合"
#| fig-width: 6
#| fig-height: 8
#| fig-showtext: true

p1 / p2
```

还可以引入括号 `()`，实现更加复杂的图形组合，见下 @fig-patchwork-grid 。

```{r}
#| label: fig-patchwork-grid
#| fig-cap: "多图组合"
#| fig-width: 8
#| fig-height: 8
#| fig-showtext: true

p3 <- ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(data = function(x) subset(x, year == 2000),
             aes(color = income_level, size = pop)) +
  scale_color_brewer(palette = "RdYlGn") +
  scale_radius(range = c(1, 6), trans = "log10",
               labels = label_number(scale_cut = cut_short_scale())) +
  scale_x_log10(labels = label_log(), limits = c(10, 130000)) +
  theme_minimal() +
  labs(
    title = "2000 年", x = "人均 GDP",
    y = "预期寿命", size = "人口总数", color = "收入水平"
  )

p1 / (p2 | p3)
```

结合上面的介绍，不难看出，竖线 `|` 用于左右分割，斜杠 `/` 用于上下分割，而括号 `()` 用于范围的限定，下 @fig-patchwork-layout 是去掉括号后的效果。

```{r}
#| label: fig-patchwork-layout
#| fig-cap: "多图组合"
#| fig-width: 8
#| fig-height: 8
#| fig-showtext: true

p1 / p2 | p3
```


还可以将图例收集起来，合并放置在一处。p1 、p2 和 p3 的图例是一样的，可以将 p2 和 p3 的图例隐藏起来，将 p1 的图例放置在右侧居中的位置。


```{r}
#| label: fig-patchwork-collect
#| fig-cap: "多图组合"
#| fig-width: 8
#| fig-height: 6
#| fig-showtext: true

p4 <- p2 +
  theme(legend.position = "none")
p5 <- p3 +
  theme(legend.position = "none")
p1 / (p4 | p5) +
  plot_layout(guides = "collect")
```


看起来，有点像分面绘图，但是一个图占两列又表示它不是分面绘图，而是多图布局的效果。


最常用的功能就是这些啦，更多内容可以去 **patchwork** 包官网了解。其它可以用来组合多个 ggplot2 图形的 R 包有 **cowplot** (<https://github.com/wilkelab/cowplot>)、**gridExra** (<https://cran.r-project.org/package=gridExtra>) 和 **gghalves** (<https://github.com/erocoar/gghalves>) 等。



## 保存图形 {#sec-save-image}

**ggplot2** 包提供保存图形的函数 `ggsave()`，它可以将 ggplot2 对象导出为各种格式的图片，比如 PNG 位图图片、 SVG 矢量图片等。

```{r}
#| eval: false
#| echo: true

p <- ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(color = income_level)) +
  scale_x_log10(labels = scales::label_log()) +
  theme_classic()
```

位图是由像素（Pixel）构成的，单位 units 是 px，分辨率取决于单位面积上像素的数量，参数 dpi 往往根据显示设备而定，出版打印常用 300。

```{r}
#| eval: false
#| echo: true

ggsave(filename = "gapminder.png", plot = p, 
       width = 800, height = 600, units = "px",
       device = "png", dpi = 300)
```

矢量图是由点构成的，由点及线，由线构成路径，在一定坐标系统下，每个点都记录了坐标及方向。

```{r}
#| eval: false
#| echo: true

ggsave(filename = "gapminder.svg", plot = p, 
       width = 8, height = 6, units = "in",
       device = "svg")
```


## 图文混合 {#sec-image-text} 


[**geomtextpath**](https://github.com/AllanCameron/geomtextpath) [@geomtextpath2022] 包新添文本路径图层，文本随路径变化，实现图文混合的效果，也省了图例，如 @fig-text-path 所示。

```{r}
#| label: fig-text-path
#| fig-cap: "图文混合"
#| fig-showtext: true
#| fig-width: 5
#| fig-height: 4

library(geomtextpath)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, 
                           color = income_level)) +
  geom_point(show.legend = FALSE) +
  scale_x_log10(labels = scales::label_log()) +
  geom_labelsmooth(aes(label = year),
    text_smoothing = 30, fill = "#F6F6FF",
    method = "lm", formula = y ~ log10(x), show.legend = FALSE,
    size = 4, linewidth = 1, boxlinewidth = 0.3
  ) +
  theme_classic() +
  labs(
    title = "2007 年", x = "人均 GDP",
    y = "预期寿命", color = "收入水平"
  )
```


## 局部缩放 {#sec-zoom-out}

局部缩放是非常常用的一个绘图需求，有时候就是需要将局部细节放大，再绘制，以展示图形的重点关注区域。 [**ggforce**](https://github.com/thomasp85/ggforce) 包的 `facet_zoom()` 函数将目标区域作为单独的一个分面展示。

```{r}
#| label: fig-zoom-out
#| fig-cap: "局部缩放"
#| fig-showtext: true
#| fig-width: 6
#| fig-height: 5

library(ggforce)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(colour = income_level)) +
  facet_zoom(x = income_level == "低收入") +
  labs(x = "人均 GDP", y = "预期寿命", color = "收入水平")
```


## 添加水印 {#sec-watermark}

**patchwork** 包的函数 `inset_element()` 可以给图片上添加某公司的徽标或水印文字，以示版权归属。

```{r}
#| label: fig-watermark
#| fig-cap: "添加水印图片和文字"
#| fig-showtext: true
#| fig-width: 6
#| fig-height: 4

# 绘图展示数据
p <- ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(color = income_level)) +
  scale_x_log10(labels = scales::label_log()) +
  theme_classic() +
  labs(x = "人均 GDP", y = "预期寿命", color = "收入水平")
# 提供水印图片
logo_file <- system.file("help", "figures", "logo.png",
                         package = "patchwork")
# 读取 PNG 图片
img <- png::readPNG(logo_file, native = TRUE)
# 添加水印图片
p + inset_element(
  p = img,
  left = 0.8,
  bottom = 0.8,
  right = 1,
  top = 1,
  align_to = "full"
)
```


## 表情符号 {#sec-chernoff}

[**ggChernoff**](https://github.com/Selbosh/ggChernoff) 包受 Chernoff 表达多元数据的启发 [@Chernoff1973]，借助从笑脸到苦脸的 Emoji 表情符号来表达数据指标。比如从低收入到高收入的连续型数据，从非常喜欢到非常不喜欢的有序分类型数据，用表情表达此类数据，显得非常形象。下 @fig-chernoff 以收入水平分类，在每个分类中，将预期寿命与表情结合，越长寿越开心。

```{r}
#| label: fig-chernoff
#| fig-cap: "切尔诺夫脸谱图"
#| fig-showtext: true
#| fig-width: 6.5
#| fig-height: 4.5

library(ggChernoff)
library(data.table)
gapminder_2007 <- as.data.table(gapminder_2007)
gapminder_2007[, smile := scales::rescale(lifeExp), by = "income_level"]

ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_chernoff(aes(smile = smile, fill = income_level), 
                alpha = 0.85, color = "white",
                show.legend = c(smile = FALSE, fill = TRUE)) +
  scale_x_log10(labels = scales::label_log()) +
  scale_fill_brewer(palette = "Spectral", 
                    guide = guide_legend(reverse = TRUE)) +
  scale_smile_continuous(midpoint = 0.5) +
  theme_classic() +
  labs(x = "人均 GDP", y = "预期寿命", fill = "收入水平")
```

